<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.pikachu.net.cn</id>
    <title>大黄老鼠的番茄酱</title>
    <updated>2020-08-09T11:40:49.589Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.pikachu.net.cn"/>
    <link rel="self" href="https://blog.pikachu.net.cn/atom.xml"/>
    <subtitle>我以前没得选择，现在我想做一个好人。——阿明</subtitle>
    <logo>https://blog.pikachu.net.cn/images/avatar.png</logo>
    <icon>https://blog.pikachu.net.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, 大黄老鼠的番茄酱</rights>
    <entry>
        <title type="html"><![CDATA[Build Guile 1.8 with CMake]]></title>
        <id>https://blog.pikachu.net.cn/post/build-guile-18-with-cmake/</id>
        <link href="https://blog.pikachu.net.cn/post/build-guile-18-with-cmake/">
        </link>
        <updated>2020-08-09T11:11:39.000Z</updated>
        <summary type="html"><![CDATA[<p>hi, I'd like to introduce my guile cmake build scripts to you:<br>
https://github.com/PikachuHy/guile<br>
Its final target is to provide an MSVC-version guile, which is basic work of MSVC-version TeXmacs. At present, you can use my cmake scripts to build guile 1.8 in ubuntu 20.04 and Windows mingw32. In the future, I will continue to explore the way of providing well-running version guile 1.8 in Windows.</p>
<p>TL;DR</p>
]]></summary>
        <content type="html"><![CDATA[<p>hi, I'd like to introduce my guile cmake build scripts to you:<br>
https://github.com/PikachuHy/guile<br>
Its final target is to provide an MSVC-version guile, which is basic work of MSVC-version TeXmacs. At present, you can use my cmake scripts to build guile 1.8 in ubuntu 20.04 and Windows mingw32. In the future, I will continue to explore the way of providing well-running version guile 1.8 in Windows.</p>
<p>TL;DR</p>
<!-- more -->
<h2 id="motivation">Motivation</h2>
<p>TeXmacs is an useful scientific editing platform, which depends on Guile 1.8 now. I'm a heavy user of TeXmacs and almost use it everyday. When the error occurs in TeXmacs, it's a terrible user experience. Thus, I want to debug TeXmacs and custom it. Unfortunately, building a debug environment<br>
is not easy, especially my work heavily depends on Windows System.<br>
There are many mingw version guiles in GitHub(search with keywords: guile mingw).</p>
<ul>
<li>https://github.com/jralls/guile</li>
<li>https://github.com/mkeeter/guile-mingw/</li>
<li>https://github.com/cygwinports-extras/mingw64-i686-guile</li>
<li>https://github.com/slowphil/mingw-w64-guile1.8</li>
</ul>
<p>My work bases on mingw-w64-guile1.8, which is used by Windows-version TeXmacs and use the mirror of guile<br>
https://github.com/texmacs/guile</p>
<h2 id="implementation">Implementation</h2>
<p>Current code host in:<br>
https://github.com/PikachuHy/guile<br>
Main scripts:</p>
<ul>
<li>CMakeLists.txt</li>
<li>libguile/CMakeLists.txt</li>
<li>cmake/*</li>
<li>and others for test</li>
</ul>
<p>Main difficulty: How to generate config.h?<br>
I use a stupid but useful way, write all check cases one by one.<br>
https://github.com/PikachuHy/guile/blob/1.8-cmake/cmake/AutotoolCheck.cmake<br>
I think this maybe helpful for other projects when writing cmake script.</p>
<p>Another difficulty: How to generate xxx.x (e.g. alist.x)<br>
In original code, it used a generated sh script named guile-snarf. I write a python script with the same function to finish this work.<br>
https://github.com/PikachuHy/guile/blob/1.8-cmake/cmake/gen_dot_x.py<br>
Notice that, I also write cmd scripts and sh scripts for the same work.  But finally, I choose python-version scripts as my default scripts.</p>
<h2 id="result">Result</h2>
<p>My development IDE is CLion 2020.2 with its bundled cmake.</p>
<h3 id="in-ubuntu-2004">In ubuntu 20.04</h3>
<p>Guile is built successfully and all examples run well. All tests run successfully except document-related test. I build the latest TeXmacs successfully and it runs well with both static and dynamic Guile library.</p>
<h3 id="msys2mingw64">msys2/mingw64</h3>
<p>In windows 10 Version 10.0.19041 Build 19041, msys2/mingw64 (CLion check: w64 8.0)<br>
Guile is built successfully, but crashes.<br>
https://github.com/PikachuHy/guile/issues/5<br>
The main problem is the lengths of long and pointers differ.</p>
<h3 id="msys2mingw32">msys2/mingw32</h3>
<p>In windows 10 Version 10.0.19041 Build 19041, msys2/mingw32 (CLion check: w64 8.0)<br>
Guile is built successfully and run well. Howerver, some examples run crash. (e.g. box-dynamic) When I built the latest TeXmacs, I met the problem: sys/socket.h: No such file or directory<br>
https://github.com/PikachuHy/guile/issues/12<br>
https://stackoverflow.com/questions/13694233/sys-socket-h-in-mingw32</p>
<h3 id="msvc">MSVC</h3>
<p>In windows 10 Version 10.0.19041 Build 19041, MSVC<br>
Guile is compiled fail for no MSVC gmp library.<br>
https://github.com/PikachuHy/guile/issues/10<br>
We should firstly compile the MSVC-version gmp. I find that,<br>
https://wiki.sagemath.org/windows/msvc32-2008-gmp</p>
<h2 id="conclusion-and-future-work">Conclusion and Future work</h2>
<p>This is just the first step to build MSVC-version guile(and MSVC-version TeXmacs). Now we can use cmake to build guile, it is convenient to debug in CLion. (Although CLion supports Makefile in 2020.2). Next work is to write cmake scripts for gmp and provide a well-running version guile in Windows.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深圳之行]]></title>
        <id>https://blog.pikachu.net.cn/post/shenzhen-trip/</id>
        <link href="https://blog.pikachu.net.cn/post/shenzhen-trip/">
        </link>
        <updated>2020-07-14T16:07:21.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="引子">引子</h2>
<p>苦于半年的研究没有做出什么东西，越做越沮丧，越做越没希望。趁着周末，去深圳耍耍。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="引子">引子</h2>
<p>苦于半年的研究没有做出什么东西，越做越沮丧，越做越没希望。趁着周末，去深圳耍耍。</p>
<!-- more -->
<h2 id="目标">目标</h2>
<p>其实开始是想在深圳找个短期的工作的，但简历和项目经验都没有准备好了，匆匆忙忙弄一下，最后也没有投出去。另外一个目的是感受一下工业界的氛围，警示自己，以决定明年的找工作具体走什么方向。</p>
<h2 id="整体过程">整体过程</h2>
<p>7月9日(周四)晚上的火车，7月10日(周五)上午到达深圳东火车站，然后就是见几个朋友，一起吃吃饭，聊聊天。7月13日(周一)晚上的火车回来，7月14日(周二)到家。</p>
<figure data-type="image" tabindex="1"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/0.png" alt="image-20200715105425850" loading="lazy"></figure>
<p>刚到深圳大学旁边的时候，就感叹深圳大学是真的大。道路两边，一边是深圳大学的校园，另一边就是各种大公司的办公楼。如果在深圳大学读书，出来实习是真的非常方便，可以随时在学校和公司切换，还可以住学校的宿舍。</p>
<figure data-type="image" tabindex="2"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/1.png" alt="image-20200715105602152" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/2.png" alt="image-20200715105828530" loading="lazy"></figure>
<p>刚出地铁站的时候，就奔着腾讯大厦去，然后完美的错过。因为我没有看到腾讯鹅的标志，然后导航的转动又是坏的，不知道怎么回事，印象中，手机转动的话，地图上的水滴也是要跟着转动的。最后是绕路才找到腾讯大厦。在接近腾讯大厦的时候，刚好是中午，在路上就遇到许多带着鹅的工牌的人走过来。</p>
<figure data-type="image" tabindex="4"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/6.png" alt="image-20200715110450163" loading="lazy"></figure>
<p>和A君会面后就去旁边的陕西面馆吃饭，尴尬的是我点的面在A君快吃完了的时候还没有上上来。中途服务员还把另外一个桌子的东西送到我们这里，诡异的是还送了两次。等我吃完后，A君就带我去他租的房子休息，自己则回来继续上班。A君的房子，房租挺贵的，房子不大，两室一厅一厨一卫，主卧没有独立卫生间，主卧自己住，次卧给另外一个同事住。我觉得这种户型挺适合一对夫妻加他们的孩子住，如果再加上爸爸妈妈则住不下。房子外面在施工，非常吵。房子的通风非常好，打开门，打开窗，像开空调似的。</p>
<p>鹅厂加班非常严重，超出我的想象。A君常常要10点半后才能回来，当初我们在网易，也就9点多回。没有比较就没有伤害，996还真是福报(唉)。联系B君，B君也是加班。联系C君，终于遇到一个不加班的了。果然，不同部门之间还是不太一样的。于是和C君约定7月11日(周六)可以晚上一起吃饭。</p>
<p>C君吃饭的时候，带了他女友(嗯，强无敌，膜拜)。我在去找吃饭的地方时，又迷了路(🤣)。在商场里等的时候，看到两个小朋友在玩小汽车。哈哈，真好。看到小朋友玩得那么开心，真的很怀念。吃饭的时候，C君说还可以去找D君，我正有此意。吃完的时候，已经挺晚了，就各自回家。</p>
<p>和D君约定是7月12日(周日)晚上一起吃饭，周日上午醒得比较迟，吃过早餐后，就和A君去书店。书店其实挺远的，我们走了挺长时间。到了书店，A君给我推荐了一本书——王小波的《沉默的大多数》，我稍微看了几页，还挺喜欢的，就去微信读书把这本书下载下来。我以为A君也会自己找本书看的，结果却是拿出MBP，开始看代码。当时那个场景笑死我了。一个人，带着Apple Watch，拿着iPhone和iPad，在书店的咖啡馆里，拿出MBP看代码(😂)。哎，说好了不加班的。</p>
<p>下午的时候，瞎逛，去了小米的店子和华为的店子。小米的店子没人管，我也乐得清净。华为的店子，我们进去没多久，就有人问我们需要啥。我当时第一反应是华为真有钱。更奇葩的是，旁边有华为的工作人员在吹他们的云存储，观众还挺多，我听到几次“开发中”，“我们在开发中”类似的话。我以为这个就是走个形式，没想到互动环境，地下的观众那么热情，的确是惊到了。可惜apple的店子太远了，就没有过去。</p>
<p>后面就坐公交去了D君的学校旁边，因为疫情，我最后也没有进到校园里。然后就一起在商场里找个凉快的地方休息，同时等C君过来。本来我和C君是约好一起过来的，但是C君因为送女友，没有赶上火车，最后只得分别过来了。在商场外面的时候，正好遇上消防的工作人员普及高空抛物的危害，还现场做了实验。我当时就被实验的结果惊到了，其实工作人员最多待了两层楼那么高，但仍的东西砸到地面的铁皮时，还是把铁皮弄破了。等到C君过来，我们到地铁口接他，最后一起在商场某个地方吃饭。</p>
<p>吃完后，我回到A君的房子收拾东西，因为这几天都是住在他那里的，今天晚上去C君那住一晚，然后回家。</p>
<figure data-type="image" tabindex="5"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/4.png" alt="image-20200715110127279" loading="lazy"></figure>
<p>整个过程，其实就是我跑到深圳去<s>骗吃骗喝</s>的过程，哈哈哈！</p>
<h2 id="当年在网易的那种感觉">当年在网易的那种感觉</h2>
<p>以前不明白，为什么勾践会做卧薪尝胆这种事情。这不是自己受罪么？现在我才明白，平稳的日子久了，就会很快忘记当年的那种感觉。我从决定读研到现在，也不过两年时间，却是早早忘记的当年在网易的那种感觉。</p>
<p>这次去深圳，一个重要的原因就是想找回当年的那种感觉。这种感觉我描述不清楚，但是，那天晚上7点左右，看着大批的员工从各个大厦出来，我知道，我想起来了。</p>
<figure data-type="image" tabindex="6"><img src="http://cdn.pikachu.net.cn//shenzhen-trip/5.png" alt="image-20200715104900267" loading="lazy"></figure>
<blockquote>
<p>实习结束了，时间有点久呢。来的时候，还是烈日炎炎，回去的时候裹得像个大猫一样。双十一仿佛就在昨日，巨大的流量压力，平稳度过。忘不了双十一零点前项目出现风险的场景，忘不了双十一零点的狂欢，也忘不了那一张张熟悉可爱的面孔，那些一起做技术支持的伙伴。<br>
学校和公司还真是两个很不同的世界。一个很简单的问题，到了主管那也能变成很有深度的思考；一个在课堂上完全注意不到的知识点，到了资深工程师那里，也能玩得炉火纯青，在项目中进行深度优化。大概，这就是差距吧！<br>
第一次对庖丁解牛有了向往，也对基础知识产生饥渴，小项目始终是小项目。<br>
出来后，才发现原来一直生活在一个屏蔽了的过滤过的世界里，这里不说谁对谁错，只是可惜那些大好时光，一言难尽。这里特别提一句，若是不清楚自己该怎么走，天天觉得迷茫的，出来看看吧，看看这个被隔绝了的世界，你会有比任何教导都深感触。<br>
出来后，才发现自己是那么普通，那么有冲劲，还那么顽强。认识到最深的一点就是要学会忍受烂代码，在喷别人代码前，多思考如果是自己该怎么写，或者是自己能写出性能这么好，还bug少的代码？想完，该喷就喷，该学就学。<br>
离开了，还真舍不得，愿你更好。再见，网易！</p>
</blockquote>
<h2 id="选开发-or-算法的定论">选开发 or 算法的定论</h2>
<p>注：这里的算法特指2018年大热的机器学习(深度学习)算法</p>
<p>当时我也是那批叫嚣着读研了就应该找算法的人，如今的形势下，已经和当时的情况不同。一个是自身的这种算法能力太差，没法发好论文(其实，我决定这跟老师，学习，实验室以往的战绩等都有关系，当然，自己的能力是首要因素)；二是这两年算法的薪资下降，开发薪资上升，算法没有了当时那么骇人的超高福利了(大佬除外)。本来是搞人工智能让别人失业，现在成了搞人工智能的人先失业了。看看现在自媒体都懒得吹算法了，就能大概了解一二。</p>
<p>周围粗略的了解一下，我们实验室算是找算法的人比较多的了，虽然没有什么大佬(没有顶会，没有大公司AI Lab的)。我自己猜测，可能跟我们实验室是纯科研有关。我们专业虽然没有学硕，但我们老师却是用学硕的标准培养我们的。有好有坏吧，找算法的时候，有一篇ccf c或者ccf b，比没有文章要强，这也是为什么我们去算法的人比较多的原因。</p>
<p>问了一些学长，虽然研究生期间做的是算法，文章发的是算法，但最后找工作还是去的开发。开发比较累，加班比较多，算法的则不了解。几个在算法岗的学长都有点偏向搞学术，毕竟我们是实打实的学硕培养方式，虽然我们是专硕。借用一个同学的话说是，“我们不过是高级韭菜而已”。</p>
<p>继续走算法或许可以走得更远，做开发可能做不了几年。未来的机遇，谁知道呢？</p>
<p>做算法我知道，我大概率是进不来腾讯的AI Lab；做开发我知道，我大概率是进得了腾讯搬砖的。</p>
<h2 id="读研和做研究">读研和做研究</h2>
<h3 id="读研就是围城">读研就是围城</h3>
<p>或许，我应该说生活就是围城。如果哪天科技发达，可以短暂的交换两个人的灵魂，互相体验一下对方的生活，想必是极好的。</p>
<p>同学羡慕我这里生活自由，可以搞学术，可以做自己喜欢的研究，我则羡慕他有项目可以做，可以直接对接产业界。</p>
<p>读研，每个人都不轻松。也许，踏入研究生的那天起，我们都已不再是学生。</p>
<h3 id="有钱人才能做的研究">有钱人才能做的研究</h3>
<p>我是比较倾向于吴军之前说的，“科学是把钱变成知识，技术是把知识变成钱”。</p>
<p>之前考虑读研的时候，就有一个很美好的愿望，就是我本科做了那么久的开发，读研的时候，是不是可以试试搞搞研究。但最终的结果是，读研最大的收获之一是我不适合做研究。</p>
<p>做研究不适合我这种还在温饱线上挣扎的人，做研究适合“吃饱了撑着没事干的”人。不是贬义，研究就适合那种对人类边界感兴趣的，但又不用担心生存问题的人。说到这里可能稍微对比一下之前周志华实验室的招生里面，特地提到希望学生的家境好。因为总是担心钱的问题，是没法好好做研究的，有些研究是不赚钱的，甚至对找工作没帮助的。不是要说什么产学研结合，短期的收益往往是以放弃一个自己喜欢的可能需要坚持投入几年时间的事情为代价，最后勉勉强强通过验收。</p>
<p>当然咯，读研这个事情还不太一样。因为读研不代表以后就会做研究，它可以是提升一下学历，可以是换一个方向，也可以是想在学校多待几年。以前有看到，读硕士研究生就像是“本科后”(有点类比“博士后”的感觉)，虽是戏言，也有它的道理。</p>
<h2 id="找工作刷题才是王道">找工作，刷题才是王道</h2>
<p>别问我为什么？我也没法解释。</p>
<p>在自己的水平不是高出别人几个level的情况下，还是老老实实的刷题吧！</p>
<h2 id="能赚钱才是终极之道">能赚钱才是终极之道</h2>
<p>能赚钱，最好大家一起赚钱。</p>
<p>现在这种环境，没有哪个组织能放弃一个可以把3亿变成3万亿的东西(产品，人，或者其他)</p>
<p>很无奈，但很现实，不是么？</p>
<h2 id="未来展望">未来展望</h2>
<p>今年搞出一篇ccf c的文章，然后现在开始准备找实习，准备半年时间，目标是C++相关的岗位(最好是编译器方向的)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019年总结]]></title>
        <id>https://blog.pikachu.net.cn/post/2019-summary/</id>
        <link href="https://blog.pikachu.net.cn/post/2019-summary/">
        </link>
        <updated>2020-01-01T02:53:21.000Z</updated>
        <summary type="html"><![CDATA[<p>转眼间，2019年到了最后几天。以往因为某些原因没有写成的年度总结，今年终于有了足够的空闲时间。<br>
2019年，在我人生中注定是不平凡的一年。</p>
]]></summary>
        <content type="html"><![CDATA[<p>转眼间，2019年到了最后几天。以往因为某些原因没有写成的年度总结，今年终于有了足够的空闲时间。<br>
2019年，在我人生中注定是不平凡的一年。</p>
<!-- more -->
<h1 id="1-一年简述">1  一年简述</h1>
<p>18年的时候，决定留在学校继续读书，而不是去公司工作。19年，本科毕业，研究生入学，还是待在原来的地方。大年初二就跑回学校了，只是不想待在家里。刚回学校的时候，担心没有足够的电费，没怎么开空调，在寝室非常冻。打开水的地方还没有通电，我只能用自己的一个小锅烧开水。几天后，开始有同学陆续返校，情况开始好转，也可以充电费了，不用担心停电。开学后，依旧在铁哥那里做事，把去年余下的一点东西做完。做得差不多后，就开始做毕设。毕设做了点研究，出了很多岔子。现在想来，当时还不如写代码呢！我还能玩一下，做研究完全不知道干了啥。最后答辩什么的，就毕业了。别人的毕业都是各种伤心，不舍，哭得稀里哗啦的，我毕业就好像没毕业一样。<br>
暑假应该是今天过得最充实，自己最认可的一段时间。背了很多单词，学了《数据结构》《算法设计与分析》《统计学习方法》等，狂刷LeetCode，还用空闲时间读了不少书。刚毕业的时候，学校给我们的过渡宿舍非常差，我果断的在外面租了两个月的房子，房东很不错。<br>
研究生开学就是噩梦的开始。课真的太多了——《学术英语》、《数据挖掘原理与应用》、《分布式系统及应用》、《学术英语》、《应用统计》、《中国特色社会主义理论与实践研究》、《现代软件工厂》、《服务计算》、《软件架构与分析》、《算法及复杂性分析》和《论文写作指导》，基本上从早上10点上到晚上9点，而且大部分都是没啥用的课程。于是，开启逃课模式。逃了不少课，也被点到几次。唯一没逃的课就是《论文写作指导》，这个课程我认为是本学期最重要的一门课。当然，最后的各科的考试成绩又是相当差。唉，我越来越讨厌考试了。研究生入学，学校发了一点奖金，我一咬牙，就拿出所有的钱买了一台iMac 27。这个决定让我后面几个月，一度经济困难。可以说是有得有失吧！这个学期，基本没有做什么事情。第一个月把MOOC剩下的刷了，第二个月刷动态规划，做DF347，第三个月生病，第四个月考试。</p>
<h1 id="2-吐槽">2  吐槽</h1>
<h2 id="21-服务器">2.1  服务器</h2>
<p>实验室连个服务器都没有，太寒碜了。做DF347的时候，跟老师说能不能借一台服务器。然后搞了一台刀片服务器，装了一个ubuntu 16.04桌面版，为啥不装服务器版本呢？因为我装的时候，用服务器版本连不上网，不知道怎么改。后面用桌面版，我都不记得是改哪些配置才上网的。这应该算是真正意义上第一次去机房，当机器停止的时候，非常安静。当机器启动的那一刻，感觉到整个世界都在沸腾。服务器这么大的声音，兴奋之余，又担心弄坏了什么。这个服务器后面给实验室用，需要用的同学，我就给他开个帐户。如果有网络问题，我一般就找聪哥，让它登录一下。不得不说，桌面版还是很占用资源的。下次有机会，还是尽量用服务器版本吧！</p>
<h2 id="22-逃课">2.2  逃课</h2>
<p>起初是没有人逃课的，后来我第一个逃课，然后是实验室的同学跟着我逃课，最后变成了只有我一个人去上课。其实，上课刚开始还准备好好上的，后来发现不现实，就开始逃课了。包括考试也是这样。研究生的课，很多老师都会说，“怎么那么关心考试，成绩又有什么用？”。但是，实际上，我是很希望成绩没啥用的（成绩差当然希望成绩没啥用）。最后我也明白了，别人即便是逃课，考试都比我考得好，考得轻松。没啥好说的。这个时候，真的只能感叹，这个世界上聪明的人，头脑灵活的人真的多。</p>
<h2 id="23-imac">2.3 iMac</h2>
<p>买了一个iMac，配合我之前买的机械键盘，霹雳吧啦，好不威猛。然而，做事效率太低了，连代码都不会写了。最后，做事还是用windows，office。有那么一种好东西都不会用的感觉。用iMac的时候，哇，这个字体渲染好好；哇，这个UI好契合；哇，...；哇，...。时间过了，事情还没开始做，沉溺在美丽的mac世界里头。用windows的时候，靠，又有弹窗；靠，腾x讯你不弹窗会死啊；靠，windows你别升级呀，升级你好歹给我升级成功啊，别老是失败，还老是提醒我升级；靠，...；靠，...。一边骂，一边赶紧把事情弄完，再也不想用你。</p>
<h2 id="24-deepin-v20">2.4 deepin V20</h2>
<p>deepin V20前期宣传一顿操作猛如虎，后面一看Demo半成品。深度日常跳票（其实官方也没说2019年发布），按农历发布。现在有搞出一个UOS，一个新的公司。算了，算了，这跟我们没啥关系。只希望deepin V20赶紧发布，等得花儿都谢了。</p>
<h2 id="25-硕士毕业条件">2.5 硕士毕业条件</h2>
<p>每次想到我们学校的毕业条件比北大还高，我TM都想捶死学校了。我个专硕，还要搞研究，还要SCI才能毕业，找找实习不好么？虽然我不反感搞研究，但是，就是不平衡啊！搞得我们和学硕一样，还有老师上课的时候，一口一个“你们学硕，你们学硕”，真把我们当学硕了？我们是专硕啊😢。呜呜呜！！！</p>
<h1 id="3-六级之痛">3  六级之痛</h1>
<p>今年上半年考六级差一点及格，下半年考六级，复习了很长的时间，最后考的时候，题目都没有做完。想通过，恐怕有困难。反正，我要是过了，坚决不考六级了。我要是没过，下次就裸考。这复习了还不如我不复习呢！（这是气话）<br>
准备六级的时候，确实花了很多时间背单词做题，练习听力。别的效果我不知道，但是听力，的确有一段时间，发现看YouTube上的视频，我能很清楚的听到他们的发音。然而并没有什么用，考试的时候，完全不知道听力放的是啥。<br>
我真觉得什么技术书上的英语，什么论文的英语比六级简单多了。也搞不清楚，英语到底怎么学，不知道哪里差了什么。反正就是，不想再见到六级的考试题目。</p>
<h1 id="4-texmacs之殇">4  TeXmacs之殇</h1>
<p>这段我挺想删除的，毕竟是自己实力太差，不能老怪别人做得不好。最后想了想，还是留着，毕竟写了这么久，也是在开源路上的一个脚印。</p>
<p>本来是想给TeXmacs修一些BUG，加点特性。但最后一年结束了，除了刚开始脑袋发热，热情高涨，做了点事情，其他的时候都没有什么动力去做。哦，后面还录了几个TeXmacs使用的演示视频，也没有继续录下去了。阻碍的原因有几个：</p>
<ul>
<li>
<p>Guile<br>
TeXmacs中大量使用guile，我对这个语言非常陌生，学了几次，都没有搞清楚到底是怎么回事。没有弄清它的逻辑，后面也就是放弃了。瞎改虽然有时候起了点效果，但终究不是正道。每次看到这一坨，我都会想，有这闲功夫，不如看电视呢！</p>
</li>
<li>
<p>feature commit被撤<br>
这个我开始还没有意识到，后面我每次想加点什么的时候，都会莫名其妙的想起这个问题。我和sadhen的环境应该是差不多的：CMake+Qt5，但是Joris van等用的是autotool，环境上（还包括gcc或者clang版本）可能有问题。如果我想要的功能，没法合并到master，就只能自己玩。后面上游的更改和自己的维护就非常麻烦。既然都自己玩了，我干嘛不用Office，方便，懒得折腾。</p>
</li>
<li>
<p>团队交流与管理<br>
TeXmacs在这一块是比较混乱的。下一个版本要做什么事情，没有什么规划，版本的发布似乎也没有什么预兆，导致经常有插件挂掉。团队沟通主要靠邮件，延迟非常大。这种开源项目，要求不能太高，软件能用，BUG有人修就不错啦。每次我都这么安慰自己。</p>
</li>
</ul>
<p>TeXmacs有不少优秀的地方，有时候用起来真的非常方便。毛病也很多，非常讨厌，直接让人想放弃使用。说了这么多TeXmacs的问题，也该批批自己了。</p>
<ul>
<li>
<p>写代码前不思考，xjb改<br>
有时候有了想法，不仔细去思考这个东西对TeXmacs的影响，改出问题后不好好思考问题在哪里，直接回滚代码，放弃修改。遇到问题后，不沉着应付，反而怪TeXmacs这里不好，那里不好。这本身就有重大问题。</p>
</li>
<li>
<p>没有深究问题背后的原因<br>
记得有一次一个中文字符输入的BUG，我找到了大概的一个解决位置，但是不清楚具体原因，就跟sadhen说，这里硬编码什么什么就能解决这个问题。其实，那里的代码我没有看懂。这个结果是我试出来的。sadhen仔细看过代码后，从根源上修掉了BUG，并保证了扩展性。我当时很不服气，怎么我就没有看出问题的根源是这里。然后，重新把代码拉下来看。不过，最后因为其他的事情就忘记了。</p>
</li>
<li>
<p>不懂得问题分解，大事化小<br>
我以为我代码写不动是技术不行，实际上是不知道怎么把一个大问题分解为小问题。忙的时候会忙死，闲的时候会闲死。</p>
</li>
</ul>
<h1 id="5-新年愿望">5  新年愿望</h1>
<ul>
<li>发一篇SCI 三区的论文</li>
<li>找一份C++的实习</li>
<li>LeetCode 300题</li>
<li>找一个非本专业的爱好</li>
<li>多看一些技术无关的书籍</li>
<li>多带一些非功利性的去读书、学习</li>
<li>多和朋友们出去玩</li>
</ul>
<h1 id="6-附2019重点事件">6  附：2019重点事件</h1>
<h2 id="61-书籍">6.1  书籍</h2>
<ul>
<li>《算法之美》</li>
<li>《C/C++中国象棋程序入门与提高》</li>
<li>《如何有效阅读一本书》</li>
<li>《算法帝国》</li>
<li>《暗时间》</li>
<li>《如何阅读一本书》</li>
<li>《与众不同的心理学》</li>
<li>《如何解题》（部分）</li>
<li>《算法心得——高效算法的奥秘》（放弃）</li>
<li>《编程之美——微软技术面试心得》</li>
<li>《小王子》英文版（两遍）</li>
<li>《APUE》（部分）</li>
<li>《程序员的自我修养——链接、装载与库》</li>
<li>《程序是怎么跑起来的》</li>
<li>Algorithm (放弃)</li>
<li>《大型网站技术架构：核心原理与案例分析》</li>
<li>《大型分布式网站架构设计与实践》</li>
<li>《大型网站系统与Java中间件实践》</li>
</ul>
<h2 id="62-电影">6.2  电影</h2>
<ul>
<li>Sweet November</li>
<li>《美国工厂》</li>
<li>《速度与激情》</li>
<li>《我和我的祖国》</li>
<li>《中国机长》</li>
<li>《黑客帝国》（一、二、三、动画版）</li>
</ul>
<h2 id="63-代码">6.3  代码</h2>
<ul>
<li>LeetCode 解题数 156</li>
<li>KNN的实现</li>
<li>DF347 云计算时代的大数据查询分析优化</li>
<li>AutoSRT</li>
<li>贪吃蛇</li>
</ul>
<h2 id="64-mooc">6.4  MOOC</h2>
<ul>
<li>浙江大学 陈越 《数据结构》</li>
<li>北京大学 屈婉玲 《算法设计与分析》</li>
</ul>
<h2 id="65-其他">6.5  其他</h2>
<ul>
<li>买了一台iMac 27</li>
<li>录了几个TeXmacs的演示视频</li>
<li>写了一个简历</li>
<li>生病，写了《生病杂谈》</li>
<li>找老师要了一套《TAOCP》</li>
<li>逃课，唯一没有逃的是《论文写作指导》</li>
<li>给老师过了一个生日</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[观《第9届深度开发者与用户大会》有感]]></title>
        <id>https://blog.pikachu.net.cn/post/dduc-9/</id>
        <link href="https://blog.pikachu.net.cn/post/dduc-9/">
        </link>
        <updated>2019-11-23T10:31:04.000Z</updated>
        <summary type="html"><![CDATA[<p>11月23日，第9届深度开发者与用户大会正式召开。满怀着期待，早早的打开了《IT大咖说》。总的来说，这次的大会还是有不少好东西的，当然，直播的效果是真的差。</p>
]]></summary>
        <content type="html"><![CDATA[<p>11月23日，第9届深度开发者与用户大会正式召开。满怀着期待，早早的打开了《IT大咖说》。总的来说，这次的大会还是有不少好东西的，当然，直播的效果是真的差。</p>
<!-- more -->
<h1 id="总体流程">总体流程</h1>
<p>原定于9点开始的大会，被推迟到了9点半，而且9点到9点半的这段时间非常混乱。开始后，倪光南院士的开场我没有听到。然后工信部的领导讲话，直播直接被掐。体验相当的差，一度以为直播挂了。</p>
<p>领导讲完后就是深度的专家讲了一下比赛的情况，后面还有华为的，龙芯的，工信部的讲了一些，没做笔记，现在记得太清了。上午还有一个重要的事情就是给大赛的项目颁奖，几个主要的项目是远程控制软件，OJ，还有做图像的。最后是获奖的几个项目发言，反正差不多就是广告。</p>
<p>下午倒是蛮准时的，我迟了2分钟开直播，大会已经开始了。</p>
<p>首先是刘总讲了设计理念，deepin的东西的确做得非常的漂亮，简洁，好用，克制。但我总感觉，一个重要的原因是做的功能非常少，有很多时候给我的感觉就是，不折腾其他的，也刚好能用，就不折腾了吧。刘总最后还讲了一个期望，希望deepin能自成一派，这个5年后再看吧！</p>
<p>然后深度CTO张磊讲，说真的，我真没听出张磊讲了什么特别实质的东西，结束了的时候，我都是懵的。</p>
<p>接着又是华为和龙芯，都说了自己做了操作系统，感觉离我还比较远。华为讲一个用机器学习的方式（分类，聚类）对操作系统，应用软件的参数进行调优，还是蛮新奇的。</p>
<p>诚迈科技的讲了操作系统的一些历史，发展，最后给了一个结论，deepin能成。</p>
<p>中望CAD也出了deepin版本，对这个软件不熟。科大讯飞好好秀了一把肌肉，各种冠军，还扔出一个输入法。紧接着就是搜狗上去讲自己的搜狗输入法，新版本主要多了一个皮肤，多了一个deepin id同步。金山WPS主要是讲后面多个应用合一个，提了下公式编辑器，开发接口的事情。最后一个是希沃，放了好多视频。</p>
<h1 id="大会吐槽">大会吐槽</h1>
<ul>
<li>感人的直播画质</li>
</ul>
<p>这次DDUC的直播画质，真的超级差，眼睛都快瞎了。最后一段时间，还老是掉。</p>
<ul>
<li>一言难尽的主持人</li>
</ul>
<p>主持人的说话的时候，总觉得停顿有问题。而且衔接真的只能说，明年请继续加油。</p>
<ul>
<li>领导不可说的小秘密</li>
</ul>
<p>这段掐直播的时候，真是不可描述。</p>
<ul>
<li>不和谐的弹幕</li>
</ul>
<p>这个直播是放在《IT大咖秀》上的，可以发弹幕，然后总有人发一些让人讨厌的东西。最重要的是，没法关闭。</p>
<ul>
<li>还有很多其他的问题，就不一一列举了</li>
</ul>
<h1 id="小结">小结</h1>
<p>看习惯了各大手机厂商的发布会，看DDUC就感觉直接回到了不知道多少年前。</p>
<p>这次大会，听得最多就是“平台”二字，个个都想做平台。不过的确可以看到deepin的发展越来越好了，有越来越多的厂商参与进来，等到deepin V20正式发布的时候，应该是有很不错的体验。</p>
<p>但是，有那么一瞬间，我突然发现deepin离我越来越远了。它似乎不再是我认识的那个deepin，又有点像。算一算时间，DDUC已经是办了9年了，我用iMac的时间也快半年了吧。过去的这些日子，我鲜有打开deepin V15，甚至都很少用Windows 10。我在想，在过去的9年时间里，有多少人可能是像我一样，一直在等着一个更好用的deepin，最后用了mac。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云计算时代的大数据查询分析优化 初赛小结]]></title>
        <id>https://blog.pikachu.net.cn/post/df347/</id>
        <link href="https://blog.pikachu.net.cn/post/df347/">
        </link>
        <updated>2019-10-31T13:48:05.000Z</updated>
        <summary type="html"><![CDATA[<p>这个比赛做了大概二十来天的样子，起初是为了练习数据结构与算法，后面渐渐偏离的初心，现在不得不放弃。一个是实在没有时间，课太多了。二是做这个已经严重的干扰到我的正常学习和生活。今天对这个比赛的过程简单做了一个总结。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个比赛做了大概二十来天的样子，起初是为了练习数据结构与算法，后面渐渐偏离的初心，现在不得不放弃。一个是实在没有时间，课太多了。二是做这个已经严重的干扰到我的正常学习和生活。今天对这个比赛的过程简单做了一个总结。</p>
<!-- more -->
<h1 id="背景">背景</h1>
<p>9月27日，老师在群里发了CCF的这个比赛。我在众多比赛中选中了 <a href="https://www.datafountain.cn/competitions/347">云计算时代的大数据查询分析优化</a>，赛题是基于海量数据场景下，借助于CPU新指令或新硬件，提升复杂计算的效率。选中它的理由大概是它是所有比赛中唯一一个不是机器学习的，而且要实现这个查询的功能，需要实现非常多的数据结构。而我开始的目的仅仅是为了训练自己的数据结构和算法。</p>
<p>题目内容什么就不说了，只提一下，这个数据量有6亿条，应该是我第一次处理上亿的数据量。这个题目的核心挑战主要是</p>
<ul>
<li>软硬一体化</li>
<li>算法</li>
</ul>
<p>当然，我的目标只是做算法和数据结构，所以只能专注于算法。</p>
<h1 id="结果">结果</h1>
<p>截止10月10日，所有队伍最好的实现是6s（多个查询）<br>
截止10月28日，我的实现最好是40s（单个查询）<br>
不考虑其他，仅粗略估计，性能相差7倍。</p>
<p>当然，我提交的评测没有成绩，因为我分配的内存过大，官方写的120G，实际可以用的后面官方解释说是不到100G。还有可能是我的代码有内存方面的问题，导致大批量的查询内存超标。实际上，在最后一次检查和测试代码的时候，我发现我的查询部分存在内存泄露问题，即每查询一次，内存增加128G * 0.4%左右的内存。</p>
<p>实力不如别人，自然心服口服，以后如果有机会，自然还要挑战一次。</p>
<h1 id="实现过程">实现过程</h1>
<p>总体的过程大致可以分成以下几个步骤</p>
<ul>
<li>读数据文件</li>
<li>数据过滤</li>
<li>建立索引</li>
<li>表连接</li>
<li>分组求和</li>
<li>取Topn</li>
<li>输出结果</li>
</ul>
<h2 id="读数据文件">读数据文件</h2>
<p>C语言或者linux操作系统提供了4个读文件的API，分别是</p>
<pre><code class="language-c">fscanf, fread, fgets, mmap
</code></pre>
<p>测试的性能</p>
<figure data-type="image" tabindex="1"><img src="http://cdn.pikachu.net.cn//blog/df347/api_read.png" alt="image-20191031205725585" loading="lazy"></figure>
<p>当然，这里跟我解析数据的实现相关，如果不解析数据，读完16G的文件，也只要零点几秒，所以读数据不是瓶颈。</p>
<p>这里我放一张读lineitem的图</p>
<figure data-type="image" tabindex="2"><img src="http://cdn.pikachu.net.cn/blog/df347/lineitem_read.png" alt="image-20191031211703383" loading="lazy"></figure>
<p>具体地，有整数的解析，浮点数的解析，日期的解析，在这次的场景中，我全部换成整数算的。</p>
<h3 id="整数的解析">整数的解析</h3>
<pre><code class="language-c">int key = 0;
while(*buffer != '|') {
   key = key * 10 + *buffer - '0';
   buffer++;
}
</code></pre>
<p>代码看起来很简单，我没有调用库函数，因为库函数比我的这个粗暴的做法慢。</p>
<p>这里有一个乘10的操作，我还特地查了怎么去乘10，结果发现直接<code>a*10</code>比<code>a&lt;&lt;3 + a&lt;&lt;1</code>快。</p>
<h3 id="浮点数的解析">浮点数的解析</h3>
<pre><code class="language-c">        int price = 0;
        while (*buffer != '|') {
            if(*buffer == '.') {
                buffer++;
                continue;
            }
            price = price * 10 + *buffer - '0';
            buffer++;
        }
</code></pre>
<p>我是把它当成整数用的，也很粗暴，为了啥，性能。</p>
<h3 id="日期的解析">日期的解析</h3>
<pre><code class="language-c">#define sdate2idate(idate, sdate) \
idate = \
 (sdate[0] - '0') * 10000000 \
+(sdate[1] - '0') * 1000000 \
+(sdate[2] - '0') * 100000 \
+(sdate[3] - '0') * 10000 \
+(sdate[5] - '0') * 1000 \
+(sdate[6] - '0') * 100 \
+(sdate[8] - '0') * 10 \
+(sdate[9] - '0') ;
</code></pre>
<p>因为日期的格式是确定的。对日期的解析，我的处理方式更粗暴，就是一个宏，直接算完。</p>
<h2 id="数据过滤">数据过滤</h2>
<p>我开始是没有这步的，后面做完后才加上去。具体实现为</p>
<ol>
<li>
<p>对查询参数做统计，最大，最小，区间</p>
</li>
<li>
<p>读数据时只写入可能查询的数据到内存</p>
</li>
</ol>
<h2 id="建立索引">建立索引</h2>
<p>建索引常用的数据结构有</p>
<ul>
<li>b-树</li>
<li>b+树</li>
<li>skiplist</li>
</ul>
<p>我在实现时，尝试了skiplist但是插入性能不理想。</p>
<p>实际在用的是hash。因为这次的数据custkey和orderkey，都是连续递增，且是从1开始。所以我这个实现是严重过拟合的。</p>
<p>实际的SQL，还有一个日期范围查询，我想用跳表做，于是学了一个星期的跳表，然后用C写了一个实现（参考redis），但是仅插入就花了100+s，基本不可用。</p>
<p>这里我放一张为lineitem建立索引的图</p>
<figure data-type="image" tabindex="3"><img src="http://cdn.pikachu.net.cn/blog/df347/lineitem_index.png" alt="image-20191031211750917" loading="lazy"></figure>
<h2 id="表连接">表连接</h2>
<p>表连接的算法有</p>
<ul>
<li>Nested-Loop Join(Simple, Index, Block)</li>
<li>Hash Join</li>
<li>Merge Join</li>
</ul>
<p>都很好理解，我用的其实算是Index Nested-Loop Join。</p>
<p>简单说，就是3重for循环。</p>
<h2 id="topn">topn</h2>
<p>这个我查到了可以用</p>
<ul>
<li>堆排序</li>
<li>并行取topk，然后合并为topn</li>
</ul>
<p>代码都还好写，但我没有做并行。</p>
<h2 id="失败的并行">失败的并行</h2>
<p>并行化读15M custome需要30s，而串行只要0.25s<br>
并行化建立索引，比串行慢<br>
读数据用生产者——消费者模型，比串行慢</p>
<p>这里的原因，我不清楚，网上说有CPU缓存的问题，我还没法证实。</p>
<h2 id="失败的跳表">失败的跳表</h2>
<p>跳表(skiplist)是一种随机化的数据结构，基于并联的链表。插入、删除、查找的复杂度都是O(logN)。其性能匹敌红黑树，实现简单。在LevelDB，Redis中有运用。 但是，我跳表建立索引 100+ s。</p>
<p>这里的原因有很多。</p>
<ul>
<li>我对跳表还不是很理解</li>
<li>我的跳表实现有问题</li>
<li>我的跳表用法有问题</li>
</ul>
<p>总之，兴奋的做了一个高级数据结构，结果效果这么差，还是挺打击人的。</p>
<p>学这个跳表，也让我感受到了，如果我要学一个东西，就应该专门的去学习一个东西，别想着我只用它插入的部分，其他的我不用就不要学。最后都是要弄懂的，反而花了更多的时间。另一个是这种高级数据结构，如果找不到参考实现，就去经典应用里面抄一个，即便第一次看不懂，抄一遍后，看一些其他人的解释，就好懂多了。</p>
<h1 id="未来可能的优化点">未来可能的优化点</h1>
<ul>
<li>硬件部分</li>
</ul>
<p>硬件部分是永不放弃的并行化。CPU有16个核心，GPU有上千个核心，还有SIMD等，都可以想办法利用起来。</p>
<ul>
<li>软件部分</li>
</ul>
<p>软件部分是对数据结构与算法永无止境的追求，要去找到一种更加高效的数据结构和算法来更快的读文件、建立索引、做表连接。</p>
<h1 id="小结">小结</h1>
<p>我的算法实现和别人的算法实现性能差异巨大，未来仍需要努力，可成长的空间还非常大。优化是一个渐进的过程，螺旋上升的过程，需要profile。当然咯，看着我的性能指标一点一点往上走，看着一个又一个的数据结构得以实现，发挥作用，那种感觉真的非常棒。</p>
<p>这次的经历，我学到了啥？</p>
<p>我想，首先是数据结构真不是那么好实现的。如果再来一次，我肯定先用C++ STL写一遍，作为一个baseline，然后自己实现一套兼容用到的STL接口的数据结构，直接替换，以提高性能。</p>
<p>其次是mmap，这个用得我真的是有些惊了。当时为了看文件的读取，还特地买了《UNIX环境高级编程》，但是实际上没有起到什么作用。看了文件读取和线程部分，对性能提升并没有我想象中的那么好。</p>
<p>再就是多线程不是万能的。长长听说，啥啥不行就用多线程什么的，根据这次的经历，多线程也是要看环境的，用多线程最好也测试一下，不然性能反而不如单线程。</p>
<p>最后一个就是对语言本身的练习和思考了。用了这么久的C，发现用它学习数据结构还是挺好的，真正到了用的时候，还是要用成熟的库去做，一来节约时间，性能有个底，二来，自己写的数据结构，很难一次性写好无bug。真要自己手写，还是要定位到就是这个库函数在我们的场景下性能不行。C的宏是真的容易满天飞，我也不知道这是好事还是坏事。还有，c写容器真的痛苦😖。</p>
<h1 id="附">附</h1>
<p>整理一下，这次写的一些宏</p>
<pre><code class="language-c">// 测试代码块运行时间
#define BENCHMARK(F) \
{ \
clock_t begintime, endtime; \
begintime = clock();\
F;\
endtime = clock(); \
printf(&quot;%s:%d:%fs\n&quot;, __FILE__, __LINE__, (endtime - begintime) * 1.0 / CLOCKS_PER_SEC);\
}

// 日志
#define DEBUG(fmt, ...) printf(&quot;[DEBUG] &quot;); printf(fmt, ##__VA_ARGS__); printf(&quot;\n&quot;)
#define ERROR(fmt, ...) printf(&quot;[ERROR] &quot;); printf(fmt, ##__VA_ARGS__); printf(&quot;\n&quot;)

// 测试
#define PRINT_PLACE printf(&quot;[%s]-%s:%s:%-5d&quot;, __TIMESTAMP__, __FUNCTION__, __FILE__, __LINE__);

#define ASSERT_INT_EQUAL(ret, expected) \
\
    { \
        clock_t begintime, endtime; \
        begintime = clock(); \
        int actual = ret; \
        PRINT_PLACE \
        if (actual == expected) { \
            printf(&quot;\033[32mPASS\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
        } else { \
            printf(&quot;\033[31mFAIL\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
            printf(&quot;expected: %d\n&quot;, expected); \
            printf(&quot;actual: %d\n&quot;, actual); \
        } \
    }

#define ASSERT_TRUE(ret) \
\
    { \
        clock_t begintime, endtime; \
        begintime = clock(); \
        bool actual = ret; \
        PRINT_PLACE \
        if (actual) { \
            printf(&quot;\033[32mPASS\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
        } else { \
            printf(&quot;\033[31mFAIL\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
            printf(&quot;expected: true\n&quot;); \
            printf(&quot;actual: false\n&quot;); \
        } \
    }

#define ASSERT_FALSE(ret) \
\
    { \
        clock_t begintime, endtime; \
        begintime = clock(); \
        bool actual = ret; \
        PRINT_PLACE \
        if (!actual) { \
            printf(&quot;\033[32mPASS\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
        } else { \
            printf(&quot;\033[31mFAIL\033[0m&quot;); \
            endtime = clock(); \
            PrintTime(endtime - begintime); \
            printf(&quot;expected: false\n&quot;); \
            printf(&quot;actual: true\n&quot;); \
        } \
    }

void PrintTime(double time) {
    printf(&quot; %fs\n&quot;, time / CLOCKS_PER_SEC);
}

void PrintBool(bool X) {
    if(X){
        printf(&quot;true&quot;);
    } else {
        printf(&quot;false&quot;);
    }
}

</code></pre>
<p>我希望，相较于这些宏，用一种更易于调试的方式去写。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【转载】与deepin一起 做更好的自己]]></title>
        <id>https://blog.pikachu.net.cn/post/hualet-with-deepin/</id>
        <link href="https://blog.pikachu.net.cn/post/hualet-with-deepin/">
        </link>
        <updated>2019-10-30T13:44:12.000Z</updated>
        <summary type="html"><![CDATA[<p>一个合格的工程师，不应该只停留在问题表面，那样你十年的经验可能比不过别人一年的。另外，好的工程师应该具备让工具代替自己干活的能力，这样你才能有精力去研究更能体现个体价值的技术。——hualet</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个合格的工程师，不应该只停留在问题表面，那样你十年的经验可能比不过别人一年的。另外，好的工程师应该具备让工具代替自己干活的能力，这样你才能有精力去研究更能体现个体价值的技术。——hualet</p>
<!-- more -->
<p>本文转载于深度内刊，已与原作者联系。</p>
<h1 id="deepin我来了">deepin，我来了</h1>
<p>在与深度结缘之前，我就是一介普通的大学生，每天过着悠哉悠哉的逃课生活。大一的时候比较喜欢看电影，当时智能手机还没有流行，所以每天躺被窝里拿着 MP4，在一年的时间里看了数十倍于我前面十几年观看电影总时长的电影。</p>
<p>电影这种东西，好作品往往有颠覆世界观的影响，所以当时看的那些电影对我个人的性格影响很大。其中影响我走上程序员这条“不归路”的有两部电影，一部是偶然看到的经典电影《硅谷传奇》，这个电影讲述的是两个放荡不羁的天才（乔布斯和比尔盖茨，电影里主要突出乔布斯）如何颠覆整个世界的故事，看完以后我感觉自己整个人都是沸腾的状态，总幻想着自己也能够站在浪潮之巅、改变世界。</p>
<p>另一部是大卫·芬奇导演的电影《社交网络》，这部电影在美国和我们校园内网的视频资源站几乎同时上映，我蹭在同学的电脑屏幕前观看了整部电影，与之前看《硅谷传奇》时一样，激动的心情久久不能平复。不久我就做下要从机械电子工程专业跨专业到计算机科学的决定。</p>
<p>有志者事竟成，但有志者耐不住大学生活的无聊、各种奇葩活动的吸引，以及创业的梦想过于遥远的现实，大二的我很快又变得无所事事。有一次百无聊赖，去听一个当时我还比较认可的老师讲《控制理论》（现在爆火的机器学习很多概念都有控制理论的影子），在课间上厕所回教室的时候偶然看见一个奇怪系统的关机界面，便问老师那是什么系统、怎么安装之类的，老师很有点自鸣得意且不屑地跟我说让我把电脑格个空盘出来，他给我安装。<br>
我应声回去，自尊心感觉遭到了前所未有的“践踏”，当晚冒着把上百 G 电影格掉的风险，我自己在电脑<br>
上装了人生中第一个 Linux 系统——deepin。</p>
<p>当 时 的 deepin还没有经过设计师的圣手雕琢——纯程序员打造——界面非常粗糙，而且当时deeipn 还没有做 wine 和应用商店这些，光看各种折腾 Linux 的文章和《鸟哥的 Linux 私房菜》就花了不少时间。期间也深受开源文化和黑客文化的影响，慢慢产生了想给 deepin 做贡献的想法。这当然是好听的说法，真实的情况是我长期翘课看计算机专业课的书，本专业的课程亏欠太多，积重难返，找工作要提前打算。但是无奈的是当时的能力肯定<br>
是不够的，所以慢慢在微博上开始“勾搭”deepin的开发者——一个外号是猴哥、另外一个外号是兔子。经过两位时不时外放一点内部资料和经验，我慢慢入了门。于是在一个月黑风高夜，怀着忐忑的心情向 deepin 发了一封简历，但是回信迟迟未到。一夜无眠，本以为被筛掉了，第二天拿着本《计算机组成原理》出去假模假样上自习的时候，deepiner 打来电话，经过了三个小时左右的电话面试，我被告知可以去 deepin 工作了。</p>
<h1 id="deepin一起成长">deepin，一起成长</h1>
<p>拿到 deepin 的 offer 后，我愈发不想再浪费时间在应付无聊的机械专业课考试上，再加上周围根本没有一起做 Linux 的同学，一度让我产生了想辍学赶紧到 deepin 去工作的念头，感觉那里才是我的归宿。不过，在另外一个月黑风高夜，我绕着校园跑步的时候，突然有一个想法从我脑子里面闪过：如果连现在这么点小困难都坚持不下去，还指望以后能做成什么事情。从那以后，我便一边应付着我的专业课，一边看计算机的课程，还一边时不时看看 deepin 那边都在做什么，我能怎么帮忙。</p>
<p>当时的情况，我家里人一度以为我要进传销组织了，拖了不少亲戚朋友去打听公司的情况，我也想提前看看我一直向往的地方到底是什么样子的，所以在大四那个寒假，我终于买了车票要到deepin 看一看。</p>
<p>第一次到武汉，下车的时候已经是接近傍晚了，于是打车到华科投奔我一个表姐夫。看着华科里面笔直大道，两边的梧桐被泛黄的路灯光衬托着的感觉，像极了《社交网络》中哈佛大学中的那种氛围，待到第二天到达 deepin 当时的“总部”——一个高校中的大教室时，当时的我更是走火入魔地觉得自己真正到了自己属于的地方——这就是我想要的创业的 feel。记得非常清楚的是这个大教室里面坐着的每个人，都给人一种非常亲切的感觉，像是认识了很久的朋友，尤其是大眼龙宇。他们在日后也都给了我不少帮助和支持。</p>
<p>终于，在离毕业还有三个月的时候，我选择了提前到 deepin 去工作。本乐观的以为我的准备已经足够充分，但是到了 deepin 以后我才发现，deepin 真的是藏龙卧虎，任何一个其貌不扬的同事，都在一定的领域有着超凡的技巧，但当时的我基本上一样都不具备，我和他们共通的也只有对 Linux 的热爱和投入。所以，在到 deepin 的前两年时间里，我算是疯狂地攫取知识，Lisp/Haskell 这些比较开脑洞的编程语言、Vim/Emacs 这 些 上 古 神 器、Python/GTK 的 高 级用法、声明式编程思想、X11 中的机制和设计，以及设计模式、代码重构方法等等。<br>
deepin 也没有坐等我赶上，公司大神就已经开始自主桌面环境的研发，在我加入 deepin 后不久，deepin 2013 发布——搭载深度桌面环境的第一个版本。</p>
<p>2013 版本主要还是以 GTK 开发为主，但是很快大家的目光都被 Qt/QML 给吸引走了，QML 以其更具现代化的类库、声明式的界面构建方式、灵动的动画效果和方便的属性绑定等特性迅速捕获了deepin 开发者的心，于是乎轰轰烈烈的桌面环境改造计划开始了。之前版本的控制中心仍然融合了 GNOME 部分组件，所以这次先以控制中心开刀，再推广到其他组件。技术方案采用 QML 作前端、后端则使用 go的模式——完全摆脱对 GNOME 部分的依赖。13、14 年的 go 语言，远不如现在火爆，各种问题和资料稀缺，但是有大神罩着，大家的脸上除了兴奋看<br>
不到其他消极的色彩。</p>
<p>近一年的时间，2014 带着几个小版本发布，脱胎换骨。</p>
<p>在这个期间，deepin 开始往商业化的方向摆尾，公司的组织结构也在做一些尝试，我就被安排进了“深度影院开发项目组”进行一次实验。虽然是四人小组，但是要能齐心协力也要有不少磨合，这是我第一次通过实际经历，深深感受到团队协作的重要性。</p>
<p>商业形式瞬息万变，还未等到“深度影院开发项目组”实验计划完成，公司便接了一个大单子，需要集公司全体之力去支撑。2015 年下半年，公司成立了几个临时项目组，一个是桌面开发、一个是应用商店，还有一个是系统仓库构建。我抱着试一试的想法，领了新版本桌面开发的担子——用 Qt Widgets 重构整个桌面，解决之前版本的性能问题。当时的我对项目管理和桌面环境的认识都不太够，所以这个试一试的想法把我拖到了深渊。接过来这口锅的第二周我就后悔哭了，准备脱身，但是已经没办法全身而退——只能硬着头皮带着一帮子比自己厉害不知道多少的人开始了又一轮轰轰烈烈重构。</p>
<p>半年的时间，经过炼狱般的捶打，无数次在放弃和信念之间徘徊，一个新的系统版本 V15 和一个新的我同时诞生。从原来的懵懂学生，到此刻能够独当一面，刚好印证了那句老话——“因责任而成长”。</p>
<p>后面的几年时间里，deepin 系统从 V15 一路发布到 15.11，有无数人的汗水和辛酸付出，但每一个版本也都有自己的精彩：国际化、自己维护内核、统一控件库、支持高分屏、预装 flatpak 应用、系统级别的性能优化、商店支持赞赏、适配触屏等等，deepin 每次系统发布都是干货满满。</p>
<p>有“好事者”简单统计了一下，deepin 系统从项目启动到现在：</p>
<ul>
<li>发布超过 40 个大小版本；</li>
<li>针对系统和安全补丁，持续迭代发布更新185+次；</li>
<li>开发了实用工具软件 30 多款；</li>
<li>深度商店更是聚集了 Linux 生态中优秀的软件1000+ 款。</li>
</ul>
<p>在用户社区建设方面：</p>
<ul>
<li>
<p>号召全球用户对系统进行国际化，支持超过30 种语言；</p>
</li>
<li>
<p>联系镜像站点超过 100 个，覆盖超过 33 个国家和地区；</p>
</li>
<li>
<p>7 种语言的爱好者社区，为当地用户提供帮助；</p>
</li>
<li>
<p>总下载量超过 8000 万次。</p>
</li>
</ul>
<p>作为 deepin 操作系统子产品之一的 DDE（深度桌面环境），也在这几年的时间里受到越来越多人的喜爱，被多个知名发行版推荐或者作为默认 桌 面 环 境， 这 些 发 行 版 包 括 Arch、Manjaro、  Fedora、Debian（部分组件）、Gentoo、Pardus  等——感谢这些社区对 DDE 的喜爱和认可。  在 deepin 工作的这几年，我跟 deepin 系统  一样，随着时间的推移快速成长，都在 2015 年蜕  变的基础上又多了一份厚实和稳重。</p>
<h1 id="deepin-做更好的自己">deepin, 做更好的自己</h1>
<p>之前在做社区活动的时候有跟社区的小伙伴做交流，有人问我在深度学到了什么？我当时回答了三个方面：第一方面是如何做技术、第二个方面是如何做产品、第三个方面是做一个人做不到的事情。第一个如何做技术，简单来说就是“刨根问底”。面对一个难题，高手往往如庖丁解牛一般，把问题分析透彻，然后才是解决方案。普通人则是“试错”，运气不好就抓耳挠腮，运气好时试出了方案就慌忙翻篇儿，再也不想多看问题一眼。殊不知“没有天生的高手，只有努力的强者”这句话，任何高手都是通过一次次解决难题的积累才成长起来的。一个合格的工程师，不应该只停留在问题表面，那样你十年的经验可能比不过别人一年的。另外，好的工程师应该具备让工具代<br>
替自己干活的能力，这样你才能有精力去研究更能体现个体价值的技术。</p>
<p>第二个如何做产品，对于非科班出身的我，说出来可能有点班门弄斧的感觉，但是其实我想说的并不是自己掌握了做出优秀产品的诀窍，要做出优秀的产品需要天时、地利、人和，这种机会可遇不可求。我想说的是针对一个合格的工程师而言，不应该只局限在写需求、做设计、写代码、补文档这些方面，而应该投入一部分精力去思考自己参与的产品到底需要自己做些什么才能体现自己的价值，否则，你就真的是一个搬砖的“码农”了。借用我很喜欢的一位传奇程序员 JWZ（前 Netscape 员工，Mozilla 项目的发起人之一）曾经说过一句话——<br>
“you’re not here to write code; you’re here to ship products.”</p>
<p>第三个做一个人做不到的事情，其实就是我们平常所说的团队合作了。自 2015 年“掌管”了整个系统的开发以后，越来越感受到个人精力的有限、能力之渺小，这个世界上太多的事情不是一个人所能做到的。但是我们又希望能达成目标或者理想，这时候就必须仰仗团队成员的力量了。想一想我们所信奉的开源文化，哪个开源项目不是原作者集社区的力量做自己一个人做不到的事情？而且在一起努力之后跟并肩作战的人成为一个团队，这才有了各式各样的社区。</p>
<p>为什么我说前面的三点是“当时的回答”呢？</p>
<p>主要是因为最近 deepin 系统、我们的团队和我都迎来 2015 年之后最大的一次挑战——V20，透漏更多关于 V20 的信息当然是不可能的啦，我只能摆出“phenomenal”、“incredible”、“amazing”和“gorgeous”等形容词，让各位从侧面了解一下 V20，如果这还不够，那我还用回我的老词“脱胎换骨”——这必然伴随着剧烈的痛苦，但是每次<br>
痛苦的经历又总能激发人的思考和灵感，伴随着V20 的系统逐渐成型，我也有了自己一点新的想法：不要给自己设限，做更好的自己。</p>
<p>人生的舞台是很大的，我们却总是在找各种借口——“我怕我搞砸了”、“这个我好像没有经验”、“人微言轻，我还是不表现了”、“我还太年轻”、“我老了、累了”……导致我们错失了很多机会，没办法将自己提升到另外一个层次。机会来了，就要去抓住！胆子大一点，不害怕出错，要快速从错误中吸取经验、成长；眼光放长远一点，格局高一个层次就可以在高层次发动“降维攻击”，很多以前让自己糟心透了的问题说不定都会迎刃而解。</p>
<p>文章末尾，祝福 deepin、祝福我们的团队和所有曾经和一直支持我们的小伙伴，做更好的自己！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生病杂谈]]></title>
        <id>https://blog.pikachu.net.cn/post/think-when-ill/</id>
        <link href="https://blog.pikachu.net.cn/post/think-when-ill/">
        </link>
        <updated>2019-10-29T07:48:00.000Z</updated>
        <summary type="html"><![CDATA[<p>生病是痛苦的。本科几年，基本没有怎么生病，现在刚上研究生，就病倒一次。刚开始本以为没什么大不了的，过两天就好，结果越来越痛苦，最后去医院看了看，开了些药💊，后来又躺了半个星期，才好了些。</p>
]]></summary>
        <content type="html"><![CDATA[<p>生病是痛苦的。本科几年，基本没有怎么生病，现在刚上研究生，就病倒一次。刚开始本以为没什么大不了的，过两天就好，结果越来越痛苦，最后去医院看了看，开了些药💊，后来又躺了半个星期，才好了些。</p>
<!-- more -->
<p>大概几天前，看到大飞码字发了<a href="https://t.zsxq.com/ieI2BqB">《病有所思》</a>。心想着千万不要生病😷，结果我就喉咙痛，然后咳嗽，流鼻涕。</p>
<h1 id="疯狂乱想">疯狂乱想</h1>
<p>病比较严重的时候，躺在床上啥也干不了，就喜欢乱想。想这想那的。</p>
<h2 id="我会死吗">我会死吗？</h2>
<p>每次生病，尤其是病情加重的时候，总会冒出这样的想法来，也不知道为什么。那个时候，真的有一种死亡的恐惧，甚至晚上做梦的时候，都会梦到“死神”过来接我回去。但我又不想回去，不断的挣扎。等到我在梦中挣扎脱身后，就会被吓醒，稍稍感叹一下，继续睡觉😪。是不是继续在梦中就不得而知了。</p>
<p>死亡💀真的是一个很有意思的话题。古时候有“一哭二闹三上吊”，用来胁迫某些东西。现在也有一些什么用自杀啥的逼迫某些东西。但我始终觉得，“自杀”和“死亡”是两码事，你“杀”你的，我“死”我的，咱不相干。</p>
<p>死亡是每个人生命的最后归宿，或许你还能把自己的意识保留下来，正如“有的人死了，其实他一直活着，有的人活着，其实他早死了”。</p>
<h2 id="亲人在哪里">亲人在哪里？</h2>
<p>平时巴不得躲得远远的，生病的时候完全不一样。</p>
<blockquote>
<p>家是什么？家是团圆，家是享受，家是在一起。家的意义不止是栖息的场所，更是心灵的港湾和精神的乐园。</p>
</blockquote>
<p>每每生病的时候，都希望有亲人在身边，那种感觉是安心。每每生病的时候，都在想，亲人在哪里？</p>
<p>王力宏有一首《需要人陪》，第一次听到的时候，是电影《西虹市首富》里的一个插曲。当时听的时候，就觉得非常不错，我同学说突然喜欢上王力宏的歌了，越听越好听。大概也是这种感觉吧！</p>
<h2 id="还有那么多事情做怎么办">还有那么多事情做怎么办？</h2>
<p>开始也心慌的很，这下完了，这下没得救了。</p>
<p>后面想着想着，算了，小命要紧。其他的，去死得了，反正我死了，也做不了。</p>
<p>这样一想，反而轻松下来，更能安安静静的养病。</p>
<p>又想到自己每天都很忙，好像每天的事情都很多，一总结，也做什么事情，更别说创新，突破啥的，跟自己完全没有关系。</p>
<p>说大道理，就算不懂，当政治课背也背得差不多了。</p>
<h2 id="没钱啊">没钱啊？</h2>
<p>生病的时候能想到这个，我是完全无语的。</p>
<p>仔细想想，哎哟，还有点意思。</p>
<p>今天我不开心了，为啥呢？我今天迟到了，然后我的奖金就没了。不深究的话，钱变少了，要是不关心这个钱的话，迟到就迟到呗，没有奖金不关心。</p>
<p>唉，我工作没找好，为啥呢？看谁谁谁，总包多少多少，我只有多少多少。嗯？还是钱少了，要是不关心这个钱的话，无所谓。</p>
<p>哎呀，我要是有钱，我就不生病了，YY，你就YY吧。</p>
<p>以上纯属扯淡。</p>
<p>真正的问题是，某些人有意无意的显露他们的“钞能力”，某些XX为了营销不折手段XXXX。完全没法看到真实的信息，也没法很好的判断事情的走向。而贩卖焦虑，没课，装X，XXXX热火朝天。</p>
<h2 id="未来在何方">未来在何方？</h2>
<p>每次这个问题冒出来的时候，就对自己说，你吃饱撑了。乖乖睡觉。</p>
<h2 id="睡不着啊">睡不着啊？</h2>
<p>感冒一般不存在这种问题，一旦出现这个问题，一定是我忘记吃药了，吃个药，该睡睡，该梦梦。</p>
<h2 id="你想做一个怎样的人">你想做一个怎样的人？</h2>
<p>不知道</p>
<h2 id="你想过怎样的生活">你想过怎样的生活？</h2>
<p>不知道</p>
<h2 id="咋老是乱想">咋老是乱想？</h2>
<p>怪我咯！！！</p>
<p>你以为我想啊。</p>
<h1 id="如果病好了以后">如果病好了以后</h1>
<p>生病的时候，也会有另一个念头，我要是病好了。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>如果我要是病好了，我一定ABCDEF。</p>
<p>好一个排比，等病好了，我说啥了吗？我啥也没说啊。</p>
<p>一不小心又回到了生病之前，全然忘记了生病的痛苦，只有当咳嗽的时候，才想到我有生病，我怎么又变成这个样子了。</p>
<p>生病的时候说病好了以后要怎么怎么，就跟晚上睡觉的时候，说明天我要怎样怎样一个德行。</p>
<h1 id="看b站">看b站</h1>
<p>这几天没有做啥事情，除吃了睡，睡了吃外，就是看b站。说真的，b站的推荐做得我真的不想看推荐，🐂🍺。</p>
<p>在放映厅，我看了一个《梦想改造家》的节目，跟我小时候看到的《交换空间》比较像，属于我比较喜欢看的节目。这个节目我觉得做得很不错的，富有情感，不光是只打广告。没事让你感动的稀里哗啦的，有时候不得不怀疑，你个装修的节目搞那么多的人文关怀。嗯，大概是我不懂吧。</p>
<p>看了一期又一期的《梦想改造家》，不知道多少年没有这么看过这样的节目了。从此以后，晚上也不在实验室待了，每天回去看，把这几季看完。</p>
<p>不知不觉又打开了《她和她的猫》，又是一阵无言。</p>
<p>看了不少HHKB的评测，就是周围谁有没有，要是有的话，我一定借过来体验一番，要是真的不错的话，下一次的目标就是它了。</p>
<p>手机📱，我这破手机，被我用一个蓝牙耳机续命了。一直想换一个，就是没啥动力，上次摔了一下，愣是没摔坏，下次我再“无意中”用力摔一下，看会不会坏。可惜了，可惜了。</p>
<p>b站目前是真心不错，没有广告，学习资源也丰富。不是一直戏称b站是个学习的东西，微信是打电话的地方。我自己之前也录了一个TeXmacs的视频——<a href="https://www.bilibili.com/video/av71848818">TeXmacs使用演示：如何输入数学公式</a>。以后有机会，也录一下本专业相关的东西，就当作自己的总结和分享了。</p>
<h1 id="朱自清的背影">朱自清的《背影》</h1>
<p>要说这次最触动我的，莫过于朱自清的《背影》了。我也不知道怎么的，就把这篇文章，拿过来读了读。读着读着眼泪💧就出来了。</p>
<blockquote>
<p>我看见他戴着黑布小帽，穿着黑布大马褂，深青布棉袍，蹒跚地走到铁道边，慢慢探身下去，尚不大难。可是他穿过铁道，要爬上那边月台，就不容易了。他用两手攀着上面，两脚再向上缩；他肥胖的身子向左微倾，显出努力的样子。这时我看见他的背影，我的泪很快地流下来了。</p>
</blockquote>
<p>又去看了《朗读者》中关于《背影》的片段，一时间突然觉得这几年，真是白白在一些不明不白的地方花了太多时间，而从来没有用心留意过自己的家人。</p>
<p>拿着这篇文章，我读了一遍又一遍，也不知读些什么，只是它突然就那么的吸引我，让我沉迷。</p>
<h1 id="累了困了">累了，困了</h1>
<p>一瞬间，真的感觉累了。不知道做的事情都干了啥，恍惚间，真的觉得应该花更多的时间在一些以前忽略的地方。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[暑假特训（2019年）总结]]></title>
        <id>https://blog.pikachu.net.cn/post/summary-of-summer-vacation-2019/</id>
        <link href="https://blog.pikachu.net.cn/post/summary-of-summer-vacation-2019/">
        </link>
        <updated>2019-08-30T13:07:05.000Z</updated>
        <summary type="html"><![CDATA[<p>时间不知不觉中来到8月尾，这一切都来得太快，20天，40天，50天，2个月过去。</p>
<p>这一晃，就是两个月。</p>
]]></summary>
        <content type="html"><![CDATA[<p>时间不知不觉中来到8月尾，这一切都来得太快，20天，40天，50天，2个月过去。</p>
<p>这一晃，就是两个月。</p>
<!-- more -->
<p>在暑期初， 我给自己定了一些目标，也实现了不少，基本上优先级高的算法和数据结构都达到了，其他的也完成一部分。有一个明确的目标，真的是一个好东西。记得之前，LeetCode的进度怎么都上不来，我不得不放弃其他的部分（数学），来保证我LeetCode的完成。在刷LeetCode的过程中，我的C语言写得越来越熟练，也在实现数据结构的过程中，遇到不少边界问题，都是我以前不曾想过的。机器学习算法部分，开始的时候热情高涨，一定要推出公式，一定要做课后的习题。后来，慢慢觉得这样太勉强，我连基本的概率论，微积分都不是很会，何必强求。在我的设想中，新东西的学习，探索应该是水到渠成的，太强迫不适合我。背英语单词是我做得最自豪的事情，两个月下来，背了2100+个单词，非常棒。英语听力也在慢慢听的过程中调整，寻找适合我的习惯。最开始追求voscreen的分数，后面追求听懂意思。LeetCode开始追求题目个数，后面也慢慢追求理解题目，写伪代码。打字练习和硬笔字练习应该是做得最差的。打字练习始终没有之前用金山打字通的感觉，而硬笔字笔芯有问题等也没有继续做下去。</p>
<p>暑期回家的一次，在火车上读了几本书，在家的几天，开启疯狂的读书模式。《算法之美》《算法帝国》，让我对算法有了一个新的认识，也对现在狂热的算法岗位有了新的看法。《人性的弱点》让我回忆起以前读某些书的感觉。《统计学习方法》《数据结构与算法分析——C语言描述》可以算作课本了，书中的公式、证明、推导，现在都感觉到一丝无力感。《算法引论》《如何阅读一本书》等还未读完的书，更多的给我一种思维上、宏观上的指导。以前经常到网上翻博客什么的，现在更愿意找几本经典书读一读。可能，厌倦了网络上的喧嚣、戾气，找找些老古董说说话、交交心。</p>
<p>这个暑期，很值。由一开始的死磕机器学习算法，到后面的沉稳学习数据结构与算法分析，专注程序设计。在慢慢的探索和适应过程中，找到自己最喜欢的一条路，找到最认可的自己。</p>
<p>硕士生活即将开始，后面又会有哪些事情等着我呢？好期待。</p>
<p>做最好的自己，找到最认可的自己，加油！！！</p>
<p>大黄老鼠</p>
<p>2019年8月30日于中南大学</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【转载】为何 shadowsocks 要弃用一次性验证 (OTA)]]></title>
        <id>https://blog.pikachu.net.cn/post/why-do-shadowsocks-deprecate-ota/</id>
        <link href="https://blog.pikachu.net.cn/post/why-do-shadowsocks-deprecate-ota/">
        </link>
        <updated>2019-08-09T13:03:54.000Z</updated>
        <content type="html"><![CDATA[<p>原文：https://blessing.studio/why-do-shadowsocks-deprecate-ota/</p>
<p>注：本文最后更新于 817 天前（2017-05-14），其中的信息可能已经有所发展或者不再适用于现阶段。</p>
<p>前些天，shadowsocks 提出了 SIP004 草案，旨在使用 <code>AEAD 算法</code> 取代原先的不安全的 <code>流加密 + OTA</code>，并弃用了一次性验证 (OTA)。</p>
<p>新协议的提出对于 shadowsocks 是一个非常非常重大的改进，因此我写了这篇博文为看不懂洋文的朋友们科普一下「为什么 OTA 会被这么快被弃用」以及「为什么应该使用新协议」。</p>
<h2 id="一-ota-是什么">一、OTA 是什么</h2>
<p>OTA（One Time Auth，<a href="https://shadowsocks.org/en/spec/one-time-auth.html">一次性验证</a>），是之前 shadowsocks 为了增强安全性，抵抗 CCA（Chosen-ciphertext Attack，<a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB">选择密文攻击</a>）而加入的实验性功能。</p>
<p>我觉得应该很多人都听过这玩意 —— 就算不知道 OTA 是啥好歹也在 shadowsocks 各分支的客户端上看到过「一次性验证」的开关吧？虽然这个名字确实起得有点让人不明所以就是了（笑）。</p>
<p>那么下面我来科普下当初为什么要加入 OTA 功能。</p>
<h2 id="二-原协议的弱点">二、原协议的弱点</h2>
<p>原 shadowsocks 协议的这个漏洞其实早在 2015 年就被 <a href="https://github.com/breakwa11">@breakwa11</a> 提出了。当时正值 @clowwindy <a href="https://blessing.studio/about-clowwindy-archive/">被喝茶</a>之际，此 issue 下闹得沸沸扬扬撕逼不断，过了好一段时间后才开始有正经的技术讨论。</p>
<p>如果你想要了解一下当时的情况可以去看看 <a href="https://github.com/breakwa11/shadowsocks-rss/issues/38">这个 issue</a>，我这里简略概括一下当时提出的漏洞。</p>
<h3 id="21-shadowsocks-协议">2.1 shadowsocks 协议</h3>
<p><a href="https://shadowsocks.org/en/spec/protocol.html">原 shadowsocks 协议</a> 的 TCP 握手包（加密后）的格式是这样的：</p>
<pre><code>+-------+----------+
|  IV   | Payload  |
+-------+----------+
| Fixed | Variable |
+-------+----------+
</code></pre>
<p>其中的 IV（Initialization Vector, <a href="https://zh.wikipedia.org/wiki/%E5%88%9D%E5%A7%8B%E5%90%91%E9%87%8F">初始化向量</a>）是使用随机数生成器生成的一个固定长度的输入值。通过引入 <code>IV</code> 能够使相同的明文和相同的密钥产生不同的密文，让攻击者难以对同一把密钥的密文进行破解。</p>
<p>shadowsocks 服务端会用这个 <code>IV</code> 和 <code>pre-shared key</code>（预共享密钥，通常是用户设置的密码）来解密 TCP 数据包中的 <code>payload</code>。</p>
<p>解密后的内容格式如下：</p>
<pre><code>+--------------+---------------------+------------------+----------+
| Address Type | Destination Address | Destination Port |   Data   |
+--------------+---------------------+------------------+----------+
|      1       |       Variable      |         2        | Variable |
+--------------+---------------------+------------------+----------+
</code></pre>
<p>其中 <code>Address Type</code> (ATYP) 是地址类型，占一个字节，有三个可能的取值：<code>01</code>, <code>03</code>, <code>04</code>，分别对应 <code>IPv4</code>, <code>hostname</code>, <code>IPv6</code> 类型的地址。这些都是 <a href="https://www.ietf.org/rfc/rfc1928.txt">RFC1928</a> 中定义的标准，有兴趣可以去看看。</p>
<p>握手完成后 shadowsocks 中继就会工作在流模式下，后续的所有 TCP 数据包不会再带上 <code>IV</code>，而是使用握手时协商的那个 <code>IV</code>。</p>
<p>说完了原 shadowsocks 协议的内容，下面说说该协议的不足之处。</p>
<h3 id="22-原协议的缺陷">2.2 原协议的缺陷</h3>
<p>正如上表所示，原始 shadowsocks 协议 TCP 握手包中的 <code>IV</code> 字段是 Fixed（定长）的。不同的加密算法 <code>IV</code> 长度不同，对于 <code>rc4-md5</code> 和 <code>aes</code> 系列等常用算法，这个长度是 <code>16</code> 字节。各加密算法的详细信息可以在 <a href="https://shadowsocks.org/en/spec/cipher.html">官方文档 - Cipher</a> 查看。</p>
<p>而服务端为了判断数据是否有效，会检查数据包中表示地址信息的那个字节，看它是不是上面提到的三个可能取值。<strong>如果是，就尝试解析后面的地址和端口进行连接；如果不是，立即断开连接。</strong></p>
<p>正是 shadowsocks 服务器的这个行为使得主动探测成为可能。</p>
<h4 id="221-主动探测的原理">2.2.1 主动探测的原理</h4>
<blockquote>
<p>该方法由 @breakwa11 <a href="https://github.com/breakwa11/shadowsocks-rss/issues/50">提供</a></p>
</blockquote>
<p>一般来讲，「表示地址类型的那个字节」是被加密后发送的，所以第三方无法精确的修改它。<strong>但是不巧的是</strong>，shadowsocks 所有的加密方式都是 <code>stream cipher</code>（<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8A%A0%E5%AF%86">流加密</a>），而这种加密方式的特点就是**「明文数据流与密钥数据流一一对应」**。</p>
<p>通俗地讲，即对应修改了某个位置的密文（根据加密模式的不同，可能影响到后面其他密文块的解密，也可能影响不到，但在这里这个性质并不重要），如果预先知道了明文的模式，虽然无法解密还原出内容，但可以修改密文中的特定字节，起到修改<strong>解密后的明文</strong>的效果。</p>
<p>根据流加密的这个特性，坏东西们就可以通过伪造 TCP 数据包来主动探测 shadowsocks 服务器了。攻击者只要暴力尝试修改加密后的数据包中 <code>IV</code> 之后紧接着的那个字节（如果使用的加密算法 <code>IV</code> 长度为 16 字节，那么就修改第 17 个字节），穷举 <code>2^8 = 256</code> 种可能性，<strong>如果被测试的服务器有一种到三种情况下没有立即关闭连接</strong>，就可以判断出这台机子的这个端口开放的是 shadowsocks 服务。</p>
<p>或许这种主动探测方法正在被 GFW 大规模应用，谁知道呢？你正在使用的原版 shadowsocks 代理随时有可能被封锁。</p>
<h4 id="222-防范主动探测">2.2.2 防范主动探测</h4>
<p>经过讨论后上述漏洞被证明是 <a href="https://github.com/breakwa11/shadowsocks-rss/issues/38#issuecomment-136022971">确实存在</a> 的，所以现在大部分的 shadowsocks 分支都已经加入了针对这种探测方法的对抗措施（e.g. <a href="https://github.com/shadowsocks/shadowsocks-libev/compare/v2.5.4...v2.5.5">shadowsocks-libev v2.5.5+</a>），即「随机超时抵抗」而不是立即断开连接，配合自动黑名单等机制可以有效减少被探测到的风险。</p>
<p>但是这种方法总归不是长久之计，要怎么办呢？ <a href="https://img.blessing.studio/images/2017/02/09/QQ20170209163228.jpg"><img src="https://img.blessing.studio/images/2017/02/09/QQ20170209163228.jpg" alt="img" loading="lazy"></a></p>
<h2 id="三-ota-闪亮登场">三、OTA 闪亮登场</h2>
<p>上述情况下主动探测能够得逞的原因是<strong>服务器没有对收到的数据包进行校验</strong>，随便哪个阿猫阿狗发来的数据包，不管有没有被恶意篡改过，原来的 shadowsocks 服务器都会做出同样的反应。</p>
<p>这时 <a href="https://github.com/madeye">@madeye</a>（现在的 shadowsocks 维护者）提出了 One Time Auth 即「一次性验证」的提案，给原 shadowsocks 协议加上了数据包验证。</p>
<h3 id="31-ota-协议">3.1 OTA 协议</h3>
<p>开启了 OTA 后的 shadowsocks 握手包（加密前）是这样的：</p>
<pre><code>+------+---------------------+------------------+-----------+
| ATYP | Destination Address | Destination Port | HMAC-SHA1 |
+------+---------------------+------------------+-----------+
|  1   |       Variable      |         2        |    10     |
+------+---------------------+------------------+-----------+
</code></pre>
<p>可以看到它添加了一个 <code>HMAC-SHA1</code> 字段，这个字段是将除了 <code>DATA</code> 通过 <code>HMAC-SHA1</code> 算法（以 <code>IV + PSK</code> 作为 key）生成的。并且数据包头部的 ATYP 添加了一个标志位用于指示 OTA 是否开启（<code>ATYP &amp; 0x10 == 0x10</code>）。</p>
<pre><code>+----------+-----------+----------+----
| DATA.LEN | HMAC-SHA1 |   DATA   | ...
+----------+-----------+----------+----
|     2    |     10    | Variable | ...
+----------+-----------+----------+----
</code></pre>
<p>握手完成后，接下来的 TCP 数据包均在原始协议的包上添加了 <code>DATA.LEN</code>（包长度）和 <code>HMAC-SHA1</code> 字段。这样，服务器就可以对数据包进行完整性校验，也就可以识别出被篡改过的数据包了。</p>
<h3 id="32-ota-的缺陷">3.2 OTA 的缺陷</h3>
<p>OTA 增强了安全性，可以防范 CCA，也解决了原版协议数据包容易被篡改的问题，听起来很美好，不是吗？</p>
<p><strong>但是</strong>，对于这个协议的实现，shadowsocks-libev 及其它大部分分支均假定第一个数据包必须包含整个带了 <code>SHA1-MAC</code> 的头部，否则断开连接。</p>
<p>OK，又一个可以通过服务器行为进行主动探测的地方。不过这种主动探测也可以通过上面提到的「随机超时抵抗」来进行防范，真正可怕的在下面：</p>
<blockquote>
<p>该方法由 @breakwa11 提供</p>
</blockquote>
<p>还记得我们上面提到的 <code>stream cipher</code>（流加密）的特点吗？攻击者可是使用同样的套路修改数据包中的 <code>DATA.LEN</code> 字段，然后通过观察服务器的反应来判断这是否是一个 shadowsocks 服务器。</p>
<p>举个栗子，如果攻击者恶意构造 <code>DATA.LEN</code> 的高位字节密文，使得解密后 <code>DATA.LEN</code> 的数值变得特别大（但是后面的 <code>DATA</code> 的大小并没有改变），shadowsocks 服务器就会继续等待那些实际上<strong>并不存在</strong>的数据传输完成直到超时。因此只要在发送恶意数据包后观察服务器是不是「不会断开连接且至少等待 1 分钟无任何数据包」即可确定该服务器是否开启了 shadowsocks 服务。</p>
<p>没错，这样的检测方法比检测原版协议还要神不知鬼不觉，甚至不会在服务端留下任何可疑的痕迹。OTA 当初是为了给原版协议的流加密加上一个认证以增强安全性，殊不知这带来了更大的隐患，这也是为什么 shadowsocks-org 要急急忙忙弃用 OTA 的原因。</p>
<h2 id="四-新协议-aead">四、新协议 AEAD</h2>
<h3 id="41-之前协议的缺陷汇总分析">4.1 之前协议的缺陷汇总分析</h3>
<p>原版 shadowsocks 协议最大的缺陷就是未对数据包完整性进行校验，再加上流加密的特点，导致了攻击者可以通过穷举的方式修改密文进行基于服务器行为的主动探测。</p>
<p>OTA 协议虽然通过在数据包尾部附上 <code>HMAC-SHA1</code> 字段对 <code>DATA</code> 的完整性进行了验证，但是包首部的 <code>DATA.LEN</code> 用于计算偏移的指示 <code>DATA</code> 长度的字段<strong>并没有经过验证</strong>。这导致了攻击者可以通过构建高位的 <code>DATA.LEN</code> 密文进行<strong>更隐蔽</strong>的主动探测。</p>
<p>因此，在这次新协议草案的讨论过程中<a href="https://github.com/shadowsocks/shadowsocks-org/issues/30#issue-200289203">参照了</a> shadowsocksR 协议的一个重要改进 —— 对 <code>DATA.LEN</code> 进行单独校验，参见：<a href="https://github.com/breakwa11/shadowsocks-rss/blob/master/ssr.md">ShadowsocksR 协议插件文档</a>。</p>
<h3 id="42-aead-是啥">4.2 AEAD 是啥</h3>
<p>在通常的密码学应用中，Confidentiality（保密）用加密实现，消息认证用 MAC（Message Authentication Code，消息验证码）实现。这两种算法的配合方式，引发了很多安全漏洞，过去曾经有 3 种方法：</p>
<ol>
<li>Encrypt-and-MAC (E&amp;M)</li>
<li>MAC-then-Encrypt (MtE) &lt;- 即 OTA 的做法</li>
<li>Encrypt-then-MAC (EtM) &lt;- 新协议的做法</li>
</ol>
<p>然而后来人们发现，<code>E&amp;M</code> 和 <code>MtE</code> 都是有安全问题的，所以 2008 年起， 逐渐提出了「用一个算法在内部同时实现加密和认证」的 idea，称为 <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">AEAD (Authenticated Encryption with Associated Data)</a>。在 AEAD 这种概念里，<code>cipher + MAC</code> 的模式被<strong>一个</strong> AEAD 算法替换。</p>
<p>使用了 AEAD 算法的新协议本质上就是更完善的 <code>stream cipher + authentication</code>，虽然它依然使用的是流加密，但是通过更完善的<strong>数据包完整性验证</strong>机制杜绝了上面所述的可被篡改密文的可能性。</p>
<blockquote>
<p>注：截至本文发布时新协议都是使用的 <code>流加密 + 认证</code>，不过 AEAD 的设计使得它能够使用块加密，因此上面说的并不是绝对的。</p>
</blockquote>
<p>而为了实现认证加密（Authenticated Encryption），新协议必须要将 TCP 流分割成不同的 chunk 并分别验证。如对新协议的数据包定义有兴趣可以查阅 <a href="https://shadowsocks.org/en/spec/AEAD.html">官方文档 - AEAD</a>，本文不再深入。</p>
<h3 id="43-新协议支持的-aead-算法">4.3 新协议支持的 AEAD 算法</h3>
<p>目前 shadowsocks-libev <a href="https://github.com/shadowsocks/shadowsocks-libev/releases/tag/v3.0.0">已经支持</a> 如下的 AEAD 算法，其他分支也正在跟进中：</p>
<ul>
<li>AES-128-GCM</li>
<li>AES-192-GCM</li>
<li>AES-256-GCM</li>
<li>ChaCha20-IETF-Poly1305</li>
<li>XChaCha20-IETF-Poly1305</li>
</ul>
<p>这些新的加密算法本质上就是 <code>流加密 + 验证</code>，原先的其他单纯的流加密算法均不适用于新协议。</p>
<h3 id="44-新协议的优缺点">4.4 新协议的优缺点</h3>
<p>使用了 AEAD 算法的新协议能够解决上面描述的 Original/OTA 协议的所有问题，可以有效防范 CCA 和中间人攻击，减少被主动探测的风险。我能想到的唯一的缺点大概就是性能了，但是它又能影响多少呢？Benchmark 参考在 <a href="https://github.com/shadowsocks/shadowsocks-libev/issues/1173">这里</a>。</p>
<p>shadowsocks 原本就不是为「加速网络」而生的项目，它的初衷是「突破网络审查并提供安全的加密访问」。是继续使用很可能会被 GFW 封锁的原协议呢，还是选择使用更安全的新协议呢，相信各位看官心中自有定夺 <a href="https://img.blessing.studio/images/2017/02/09/QQ20170209164340.gif"><img src="https://img.blessing.studio/images/2017/02/09/QQ20170209164340.gif" alt="img" loading="lazy"></a></p>
<h2 id="五-写在后面">五、写在后面</h2>
<p>写这篇文章之前我对密码学的了解也就是一点皮毛程度而已，所以这篇文章也是我边查资料边写出来的。为了不让自己误人子弟，我非常谨慎查阅了相关资料并向他人请教（衷心感谢 @breakwa11 和 @madeye 对本文的审阅和提出的建议！）</p>
<p>但是所谓「金无足赤，人无完人」，如果文章中仍有什么错误的地方，欢迎在下方评论区批评指正。</p>
<blockquote>
<p>大家都不容易，谨以此文敦促 shadowsocks 用户 / 开发者们尽快使用 / 支持新协议。</p>
</blockquote>
<h2 id="六-参考链接">六、参考链接</h2>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-org/issues/30">SIP004 - Support for AEADs implemented by large libraries</a></li>
<li><a href="https://shadowsocks.org/en/spec/one-time-auth.html">Shadowsocks - One Time Auth</a></li>
<li><a href="https://github.com/breakwa11/shadowsocks-rss/issues/38">ShadowSocks 协议的弱点分析和改进</a></li>
<li><a href="https://breakwa11.blogspot.com/2016/09/shadowsocks.html">Shadowsocks 各分支的安全性</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-org/issues/36">Deprecate stream ciphers with insufficient IV length</a></li>
<li><a href="https://www.kancloud.cn/digest/modern-crypto/79572">现代密码学实践指南 - 名词解释</a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">分组密码工作模式</a></li>
<li><a href="http://crypto.stackexchange.com/questions/6008/streaming-api-to-authenticated-encryption">Streaming API to authenticated encryption</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[本科毕业小结与感悟]]></title>
        <id>https://blog.pikachu.net.cn/post/summary-of-undergraduate/</id>
        <link href="https://blog.pikachu.net.cn/post/summary-of-undergraduate/">
        </link>
        <updated>2019-07-27T08:15:59.000Z</updated>
        <summary type="html"><![CDATA[<p>很久很久以前，就想写一个本科毕业的总结，让自己三五年后，乃至十年后，有一份念想。总是不知道该怎么写，来来回回删删改改拖了两个月还没完稿。</p>
]]></summary>
        <content type="html"><![CDATA[<p>很久很久以前，就想写一个本科毕业的总结，让自己三五年后，乃至十年后，有一份念想。总是不知道该怎么写，来来回回删删改改拖了两个月还没完稿。</p>
<!-- more -->
<h1 id="引子">引子</h1>
<p>“都考上大学了还学个啥，放肆玩，尽情嗨。” 我以为我的大学会是这样，实际上完全不一样的。一个人一辈子遇到的最大的谎言之一可能就是“做完xxx事情以后就轻松了”。家里给的压力，心里的压力，实际上，本科期间真的不比高中（高考）轻松，对我来说，一个最大的难题就是不知道未来该怎么办？不知道是从哪里看到的，人的三大问题：我是谁？我从哪里来？要到哪里去？高中的时候，很多问题都是老师们扛了下来，本科期间，很多问题就真的变成了自己的问题。班导师，辅导员，学委也不会有高中的压迫力，更多的该怎么做什么时候做都是自己的决定。</p>
<h1 id="匆匆四年">匆匆四年</h1>
<h2 id="大一">大一</h2>
<p>（时间混乱，实在不想改了）</p>
<p>我的专业是软件工程，当初选这个专业是计算机科学和软件工程二选一，随便选一个就好。那个时候是倾向于大学毕业就出去工作的，所以可能在倾向上，计算机科学是搞研究的，软件工程是不用搞研究的。来到学校后，有一堂导论课，讲软件开发的，用《何以笙箫默》的电视剧做类比。那个时候，我还没有看过这个电视剧，不知道他在讲什么，后来不知道什么原因，就去看了这个剧，也挺喜欢的。后来大一结束时，有一次软件实训，刚好给我们讲课的就是这个实训的总监。大一的学习，高等数学什么的，基本没怎么用心，都去学习怎么写代码去了。</p>
<p>学习C++语言，我有一本C++ Prime Plus，抱着这个砖头书，一字一字的看。其实也没看什么东西，这个本书上的习题没怎么做。现在想想，真的蠢，哪有这么学习的。大一的专业课，有一个计算机基础的课，最后要交一个软件作品。我们组当时做了一个贪吃蛇，自己配音，配音挺搞笑的。那个学期，还有一个网页设计大赛，我也去参加了，一直没做东西，直到交作品的前一天，几个人讨论了下，还是做点东西，于是做了一个Adobe的软件介绍放上去。那几个网页，相当简陋，CSS也才学。大一的时候，还参加过一次中国高校计算机程序设计天梯赛，那一年，这个比赛刚刚开始搞，不像现在这样还有学校的支持。我印象非常深刻的一点是，我和另外一个同学分别写了一个题目的解答，提交上去后，被查重查到了。这个解答我可以保证，我们绝对没有看过对方的代码，但最后我们提交的代码，无论是变量名，还是空格都是一模一样，不得不说是一个超级巧合的事情，的确令人难以相信。</p>
<p>大一的时候，还参加过学院里举办的ACM比赛，一个上午，一个题目都没有解出来，是真的惨。中午的时候，有个学长过来，发中饭，说是中饭，其实就是两个肉松饼，超级寒碜，学院是真滴小气！然而，就是在吃肉松饼的时候，AC了一道题目，也是我们这个队伍，一整场比赛下来唯一的一个题目。大一的寒假，本来是想去参加学校的ACM集训的，去了一天，发现集训的实验室没有空调，大冬天的非常冷，我冻得都快感冒了，后面就再也没去了，给当时为我办注册的学长带来了麻烦。还是大一的时候（我大一咋这么多事，怪我咯），有一个学长要组建我们学院自己的ACM队伍，要做一个OJ网站，我也参与进去。这个项目最后黄了，也没做出什么东西来。大一暑期实训的时候，做过一个XML阅读器，Qt写的，emmm，做得相当糟糕。记得有一次老师让我演示，给我的测试文件，软件立马崩了，不知道怎么想的，当时就把连接电脑的HDMI线拔了，反正我把线拔了，老师同学们也看不出我的软件有啥问题。</p>
<p>大一总是有好多好多事情，怎么也写不完，越写越多。大一的寒假放假前，科协（学院的一个组织）发了一个程序设计大赛的通知，我选择去做一个IM（即时通讯）软件，由此开始了很漫长的一个人开发的路。要是让我重新选择，我一定不一人个做。这个比赛我记得很清楚的一点是我当时是参加比赛的人中分数最低的，也就是最后一名。还有就是有用刘涛的头像做我的登录头像（那个时候应该在播《琅琊榜》吧，不然怎么会用这个人的头像，我现在对刘涛这个人也没啥印象）。其实，这个比赛对我的打击挺大的，我花了整整一个寒假学习Qt、GUI、网络编程，不如别人临时几天做的东西，后来还压抑了好久。以现在的角度看，大一最大的变化之一就是变得沉默，变得不爱说话，也不出去，几乎把能用的时间都拿去学编程和写代码，真不知道是个好事还是坏事。</p>
<h2 id="大二">大二</h2>
<p>到大二了，也有个开学的实训，做Java。然后几个人合计着说做一个游戏，做就做呗。组长从网上找了一个libGDX的框架，然后倒腾了一两星期，最后的效果可以两台机器联机跑，有大地图，有小地图，但没法战斗。我做了一个登录界面，做了个地图。那个时候刚好才看《盗墓笔记》，于是画了一个七星疑棺的地图，那棺材比人大好几倍。这次做游戏的经历，我感受到了游戏真的是一个相当复杂的工程，光美工就不是我们几个能解决的，所以后来再也没有去接触游戏方面的东西。</p>
<p>大二编程方面的项目做得很少，现在都找不到什么。大二去做了半个学期的副班长，后面干不下去了，也进入学院的某个管学习的部门干活，不知道干了啥，开会倒是去了好几次。大二应该也去参加了学院的ACM比赛，托队友的福，拿了一等奖（第二名，第一名是我非常佩服的学长之一，平时都叫他X神）。然后也参加了大一参加过的天梯赛，这个时候天梯赛就比较正式了，有学校的大力支持，还有学校的ACM选手参加。当然，从最后的成绩看，我是托我们学校后腿的那个。大二还有一个重要的事情是参加Intel软件创新大赛，这个比赛复赛被刷了，暴露了我很多问题，只是我不知悔改，继续瞎搞。大二印象最深刻的事情就是，喜欢一个女孩子，然后拿着一大束玫瑰花就问她愿不愿意做我女朋友（每次读到这个我总忍不住笑），当然，结果显然是被拒绝了😥。在大二的时候，开始接触Vue，想那个时候，还没几个人会Vue，基本找不到什么资料。Vue 2.0刚刚发布，我试着学习并练习。每天多了一个乐趣就是看知乎上各位前端大佬撕逼，相当的精彩。</p>
<h2 id="大三">大三</h2>
<p>在准备Intel软创比赛的时候，进入了大三，然后这个比赛复赛被刷。记得出成绩的那天，我差不多一直哭哭，哭到最后都没有眼泪流了。后面这个比赛为了把出比赛结果的时间调到保研之前，又办了一次。不服输的我又去参加了，拿了二等奖，然而只有一等能保研，二等没啥用，连累我的队友只能去准备考研。大三开学也有一个实训，是做Java Web，一个电商项目。负责教我们的那个老师比较喜欢我们做的这个电商项目，一直力挺我们，我觉得我们的商城做得很普通，没有什么特殊的功能，唯一我觉得可能比别人多的就是把支付宝支付的界面弄出来了，还能扫码，当然都是假的，只有界面，没有后台。大三的时间基本都投入到软创这个比赛中，甚至是后面找实习都很匆忙，没有认真准备。在打这个比赛的同时，我也挂名参加了另外一个比赛，我们的项目是做大数据和机器学习的，最后拿了一等奖，得到保研资格，能拿到这个资格，全靠队友带。纵观我参加的项目和比赛，凡是我主导的，基本都离好结果差点点，凡是我挂名划水，最后都是比较好的结果。我真是一个扫把星。</p>
<h2 id="大四">大四</h2>
<p>大四就是实习和做毕设。大三的暑假就出去实习，刚来杭州就被中介坑了一笔，果然步入社会第一步，租房就能搞到怀疑人生。最开始公司是有提供过渡住宿的，住着酒店，每天早上去酒店的餐厅吃个早餐，然后上班划划水，别提有多爽。虽然部门995，但是一个实习生能早点溜就早点溜，直到有一次被主管逮住了，后来就乖乖的待到9点走，顺带蹭一波宵夜。主管是我在实习的时候非常佩服的一个人，思考问题很有深度，能指出问题的要害，也关心大家的学习，注意是学习，不是加班或者业务哦。据同事们讲，我们主管是所有主管中最关心学习的人。最近一次，我们主管和部门还受到公司的集体表扬，嘿嘿嘿（即便我离开了，也还要蹭一波主管的光）。毕设就做的deepin论坛评论分析，其实啥都没有做出来。只不过当时确定读研了，不得不做研究。所以，毕设做得超级失败。然后就毕业咯，好多人哭得稀里哗啦的，我啥感觉都没有（怪我咯🙃）。</p>
<h1 id="项目-试验-比赛">项目、试验、比赛</h1>
<p>本来这里是有很多东西写的，本科可以说是打了三年的比赛。详细的，粗略的，林林总总可以写很多。后来想算了，都是过眼云烟，我自己都不认可自己，有啥好写的。</p>
<h1 id="偶像">偶像</h1>
<p>说起偶像这个事情，我其实是不太感冒的。强行把这些人单独拎出来写一下，是因为他们对我的学习和生活产生过影响，甚至是比较大，难以忘记的一些记忆。</p>
<h2 id="vae">Vae</h2>
<p>最近这些年，很难听到Vae<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>的其他消息，除了发新专辑的时候。Vae给人的印象就好像是低调，做自己喜欢的事情，默默拿奖。</p>
<p>印象中，初中的时候是Vae最活跃的时候，有很多同学的MP3里都是Vae的歌。那个时候，我对Vae也不了解，因为我没有MP3，也很少去听歌，多余的时间都贡献给了小霸王的游戏机，腾讯的游戏，还有唐家三少的小说。真正让我重新审视Vae的时候，是高三。我总是后知后觉。对高中有很复杂的感情，既受益于三年的艰苦训练，又对它恨之入骨。高三就是最黑暗的时刻，然后就在这段时间，上天把Vae的歌送到我面前，让我撑过了高三，顺利升入本科。不管多苦多累，前途多么没有希望，听一打Vae的歌，睡一觉，继续干。</p>
<p>我的专业是软件工程，免不了要写一些小软件。刚刚来学校的时候，学长跟我说，软件开发要讲究团队协作。我当时是不屑一顾的，认为优秀的软件开发工程师一定一个人做完所有的事情。事实证明，这个想法是极度错误，极度愚蠢的（可以参考我的第一个IM软件）。我想，这个想法的源头可以追溯到Vae的第一个专辑《自定义》，他在这个专辑中做了作词、作曲、编曲、录音、混音等几乎所有的事情。我当时想着，我做第一个软件，一定要所有的事情一个人做——界面设计、功能设计、代码编写、文档编写、答辩。由于这样做出现了不少的问题，后来希望组建团队一起做软件，又出现非常多的问题，当然，这是另外的故事了。</p>
<p>相较于Vae的低调务实，我本科期间对功与名在乎多了。非常奇怪，我也不知道怎么变成这样子。这是一个悲伤的故事，只是觉得从高中开始失去自我，慢慢麻木。未来仍在继续，还需要调节自己。</p>
<h2 id="dandy-weng">Dandy Weng</h2>
<p>Dandy Weng<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>的厉害之处与很多人不同，我第一次知道这个人都惊呆了，居然还有这样成长的人。它的个人网站做得非常棒，所以我一直想做一个自己的个人网站，然而四年过去了，这个网站依然没做出来。其实，中间一段时间是有自己写的，也间接的促进我了解前端开发方面的知识（实际上，我是个后端，没谁规定后端就不能喜欢前端的技术）。</p>
<p>个人网站还是要继续做的，万一哪些写出来了呢？</p>
<h2 id="evan-you">Evan You</h2>
<p>这年头，做前端不知道Evan You<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>的，只怕是很少很少，很多后端都知道这个人。第一次知道Evan You是Vue 2.0刚发布的时候，我试了下这个框架，非常好用，也非常喜欢。那个时候，没有什么Vue的学习资料，只有文档，和知乎上各种前端大佬撕逼。</p>
<p>我也讲不清楚为什么Vue那么吸引我，总之，那个时候，我会一些HTML，CSS，还有jQuery。然后遇到了Vue，就觉得，WOW，Vue太棒了，写起来好爽，完全没有了之前写jQuery的那种讨厌。有段时间我给Zipple<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>疯狂推荐Vue，希望他能学一下，这样我好有个伴。可能我推得太生硬了，他当时没有学，后面才学了点（现在已经好几年过去了，他的Vue等用得非常6，羡慕）。现在Vue的火爆，已不需要我说什么。</p>
<p>我看过很多Evan You的演讲，大会视频，当然，也看过Evan You的Twitter和Medium。一方面，Evan You是我看到过的英文最好的人之一。鄙人见识浅陋，没有遇到更好的了。作为半个英文智障，学个英文快要了我半条命，怎么都学不好。突然遇到这么一个又能说，又能讲的人，自然要好好瞻仰一番。另一方面，Vue解决了我当时在前端开发上的一些问题，作为一个好用的技术（框架），要了解一些这个技术背后的故事。于是就挖掘出了Vue的创始人Evan You这样一个会营销，技术又很好的牛人。</p>
<p>我也幻想着未来的某一天能写出一个开源框架解决软件开发上的一些问题。</p>
<h2 id="andy-stewart">Andy Stewart</h2>
<p>其实我更熟悉的名字是lazycat、manateelazycat<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>和老王、隔壁老王。与lazycat的缘是关于deepin<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>的。我当时用了一段时间ubuntu，常常苦恼于ubuntu各种奇奇怪怪的报错。已经不记得deepin是怎么把我勾搭上的，只是当时deepin给我的感觉就是震撼，真是个好东西，牛逼。后面就变成了deepin的狂热者，一切直到lazycat被迫从deepin离开。</p>
<p>如果说现在谁跟我说偶像，我的第一反应一定是lazycat，他给我留下非常深刻的印象，甚至可以说是我有一段时间的灯塔（现在在某些方面依然是）。lazycat年轻的时候曾敬仰RMS<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>和John Carmark<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>，我不知道这两个人是谁，还特地去查了下，鄙人果然见识浅陋，如此大牛居然从未耳闻。</p>
<p>在我印象中，lazycat有几大绝活。第一是代码写得好。更准确的说是，如果你和他有一样的需求，而他正好写了些代码解决这个问题，那么他的解决方案一定是非常棒，同时又是非常简单易懂的，操作非常人性化的。如果需求不一样或者有偏差，可能没法体会到他的这种强大的力量。第二是文章写得好。那个时候有很大一部分是研究lazycat的简书<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>，看他写的文章，当时的文章质量非常高。我当时在deepin上做的ss-client就是照着他的简书“抄”出来的，他写了篇《深度系统监视器原理剖析》<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>，我也跟着写了一篇《深度影梭客户端原理剖析》。总之，那个时候就是每天看他文章更新了什么，论坛回复了啥，是不是又有新轮子。lazycat时代的deepin是相当的亲民，同时又是充满戾气。第三是英文不好，但是靠自己写的软件，硬生生可以伪装成一个英文好的人。这我不得不服气，简直太那个啥了。</p>
<p>一切的一切直到lazycat离开deepin，我也有些心灰意冷，开始转战windows和mac，后来又写了篇《写在冷静之后的话 —— 每一道失去都是醇厚的赐予》<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>鼓励自己，但是效果不大。不管怎么说，希望lazycat的新事业越来越好，希望deepin越来越强大。</p>
<p>与deepin的恩恩怨怨、分分合合，直接激发我对另一家公司的向往，愿未来某一天能去微软。I❤Microsoft.</p>
<h1 id="开源">开源</h1>
<p>我想我开源的情结也应该是在混deepin bbs的时候培养起来的，毕竟deepin号称自己是开源的linux桌面操作系统。</p>
<p>开源 or 伪开源，这个事情，我是越弄越糊涂。到底什么是开源？我至今都无法回答。</p>
<p>之前看过一篇文章《如何从小白成长为 Apache Committer?》<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>，觉得还是像Apache这种，有组织，有纪律，有社区运营的做法比较好。</p>
<p>写ss-client的时候，也把自己的源代码挂GitHub上，号称开源。呃，总之，那个时候：开源 约等于 把代码放GitHub。后面好像还和一个经常给我提ISSUE的人吵了一下，从此以后，那个人再也没给我提ISSUE。怎么说呢？其实我这些仍然是瞎折腾，我只得给自己这么总结。</p>
<p>老王从deepin走后，我多次想在deepin上再写点什么，但都提不起劲。后来又找到TeXmacs这个项目，修了一个输入法的BUG，增加一些翻译以后，也提不起什么劲。老王最近写了篇<a href="https://manateelazycat.github.io/opensource/2019/08/03/how-open-source-works.html">《技术人怎么领导一个开源社区？》</a>怎么说呢？感觉我没有以前用deepin的激情了，现在更想轻松一些。</p>
<p>我依然会继续关注开源社区方面的事情，也希望自己未来能为开源社区作更多的贡献。</p>
<h1 id="实习">实习</h1>
<p>可能从找实习开始，是我本科期间（在规划上）做得最差的一个事情之一。</p>
<p>在找实习之前，一直沉溺在软创复赛被刷的痛苦中，一直想再战一次证明自己。留给找实习的时间基本没几天。事实证明，强行去做一个事情，只会给自己带来更多了麻烦和无奈。</p>
<h2 id="找实习">找实习</h2>
<p>我第一个面试的公司和拿到offer的公司是CVTE，是好事，也是坏事。一个是一面就面上，对后面的面试有了更大的信心，二个是以为面试就这张难度，没有花更多的时间去复习，比如数据结构、操作系统，计算机网络。面阿里二面直接跪，问的问题是流式计算与实时计算，当时压根就没听说过还有这种东西。面腾讯则是第一次面计算机网络被秒杀，第二次面，在堆和栈都没有分清楚的情况下让我过了第一面，第二面聊完人生就让我挂了。网易的面试则很容易通过了，倒是HR非常关心加班的问题。其他的，头条是笔试过不了，滴滴，美团则是没有投（也可能是笔试没过）。最后，CVTE没有给我发邮件，所以选择了去网易，其实也没得选。总之，忘记的东西比较多，可能还有很多细节。</p>
<h2 id="网易实习">网易实习</h2>
<p>可以这么说，在本科四年中，在网易的实习是我过得最轻松，最快乐的日子。我想原因可能有以下几点。</p>
<p>一是从学校出来，刚刚进入社会，对一起充满好奇。网易提供的那个过渡酒店，环境还是很不错的，离公司也近，每天早上供应免费早餐，我可以喝个牛奶，吃些面点，然后悠哉游哉的去上班。对我这种经常不吃早餐，上午饿肚子的人来说，就是天堂啊（这要求是不是有点低啊）。</p>
<p>二是认识了一个非常好的朋友——lunar。当时我们用同一个工位（惨，主要是没有明确的划分，哪里有空的地方，待哪里），有很多共同话题。</p>
<p>三是实习的工作轻松。反正对实习生没啥要求，别拖后腿就行。当然这也导致我后面秋招直接跪。</p>
<p>四是团建。“这次去哪里玩？”，“这次准备吃啥？”，“团建选哪个，赶紧投票”，隔不久就被这样问，给我一种福利好的错觉。</p>
<h2 id="秋招">秋招</h2>
<p>因为秋招在实习的时候做的，所以就放实习下面。</p>
<p>秋招是真的惨不忍睹。</p>
<p>在公司干一天活，晚上回来笔试真的没力气，经常做着做着就放弃。当时是真的傻，怎么不请假回来笔试。所以，最后只面了老虎，腾讯提前批，头条，都死得很惨。但腾讯的面试官给我留下了深刻的印象，也转变了我对腾讯的技术方面的一些看法。</p>
<p>秋招真的没啥可说的，最后网易签offer的时候，还是决定回来读研，不留在网易。</p>
<p>我挺怀念在网易的实习的日子，真的过得非常快乐，怀念在网易的伙伴们，愿某一天还能一起吃饭、吹水。</p>
<h1 id="遗憾">遗憾</h1>
<p>说遗憾好像有点重，主要还是自己没做好的地方</p>
<ul>
<li>没有规划，不清楚自己想要什么</li>
<li>没有好好考试</li>
<li>没有好好学习数学、英语、数据结构和算法等基础课程</li>
<li>没有过六级</li>
<li>软创没有拿一等奖</li>
<li>找实习和秋招面试太少</li>
</ul>
<h1 id="总结">总结</h1>
<p>一直写，一直读，也一直删，写作能力下降得厉害，不知道现在词用错的地方还有多少。本科，不管我怎么努力，也无法掩盖在规划上犯的错误。最后，I love you, CSU. You are the best University for me in the world.</p>
<figure data-type="image" tabindex="1"><img src="http://www.csu.edu.cn/images/logo.jpg" alt="CSU" loading="lazy"></figure>
<h1 id="修订记录">修订记录</h1>
<p>历经两个月的总结（2019年7月1日动笔）终于写完了。我知道今天（2019年9月1日）的完稿，肯定还存在不少的问题，所以提前留一个修订记录，以后发现我问题，及时修正。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>许嵩官方网站 http://www.xusong.com/ <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>Dandy Weng个人网站 http://www.dandyweng.com/ <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Evan You Medium https://medium.com/@youyuxi Twitter https://twitter.com/youyuxi <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>Zipple CSDN https://blog.csdn.net/csu_passer <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>lazycat GitHub https://github.com/manateelazycat Haskell https://wiki.haskell.org/Manatee <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>deepin bbs https://bbs.deepin.org/ <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>RMS wiki https://www.wikiwand.com/en/Richard_Stallman <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>John Carmark wiki https://www.wikiwand.com/en/John_Carmack <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>ManateeLazyCat 简书 https://www.jianshu.com/u/E6EbkP <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>简书原文《深度系统监视器原理剖析》 https://www.jianshu.com/p/deb0ed35c1c2 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>deepin bbs 原帖子 《写在冷静之后的话 —— 每一道失去都是醇厚的赐予》 https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=166674 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>博客原文 《如何从小白成长为 Apache Committer?》 http://wuchong.me/blog/2019/02/12/how-to-become-apache-committer/ <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
</feed>